#!/usr/bin/env python
#
# From the activity.log generated by getactivity.sh,
# add up some totals and make some graphs.
# collect number of lines and number of commits for
# each user.
#

import os

class userTotals:
    def __init__(self):
        self.revs = 0
        self.lines = 0

class activityLog:
    def __init__(self, file='activity.log'):
        self.file = open(file)
        self.collectUserStats()

    def walk(self, callback, arg=None):
        for line in open('activity.log').xreadlines():
            (revision, time, user, lines) = line.split()

            # 'micahjd' was micah's old username
            # 'uid25538' is also micah... sourceforge's /etc/passwd was missing during a commit?
            if user == 'micahjd' or user == 'uid25538':
                user = 'micah'

            if callback(arg, int(revision), int(time), user, int(lines)):
                break
        self.youngest = revision

    def collectUserStats(self):
        self.totalLines = 0
        self.totalRevs = 0
        self.users = {}

        def accumulate(arg, revision, time, user, lines):
            try:
                self.users[user]
            except KeyError:
                self.users[user] = userTotals()
            self.users[user].revs += 1
            self.users[user].lines += lines
            self.totalRevs += 1
            self.totalLines += lines
        self.walk(accumulate)

    def getUserSummary(self, file):
        file.write("For youngest revision %s:\n" % self.youngest)

        # Collect user lists sorted by revision and sorted by lines
        usersByRev = self.users.keys()
        usersByLines = self.users.keys()
        usersByRev.sort(lambda a,b: self.users[b].revs - self.users[a].revs)
        usersByLines.sort(lambda a,b: self.users[b].lines - self.users[a].lines)

        # Print them side-by-side
        file.write("<table border>\n")
        file.write("   <tr><td colspan=3>Revisions committed</td><td></td><td colspan=3>Lines added/removed</td></tr>\n")
        file.write("   <tr></tr>\n")
        for i in xrange(len(self.users.keys())):            
            file.write("    <tr><td>%s</td><td>%d</td><td>%.02f%%</td><td></td>\n" %
                       (usersByRev[i], self.users[usersByRev[i]].revs,
                        self.users[usersByRev[i]].revs * 100.0 / self.totalRevs))
            file.write("        <td>%s</td><td>%d</td><td>%.02f%%</td></tr>\n" %
                       (usersByLines[i], self.users[usersByLines[i]].lines,
                        self.users[usersByLines[i]].lines * 100.0 / self.totalLines)) 

        # Print totals
        file.write("   <tr></tr>\n")
        file.write("    <tr><td>%s</td><td colspan=2>%d</td><td></td>\n" % ("Total", self.totalRevs))
        file.write("        <td>%s</td><td colspan=2>%d</td></tr>\n" % ("Total", self.totalLines))
        file.write("</table>\n")

    def createRRD(self, name):
        # Find the start time
        def saveStartTime(arg, revision, time, user, lines):
            self.startTime = time
            return 1
        self.walk(saveStartTime)

        # Make an empty RRD
        os.system('rrdtool create %s --start %d DS:revs:COUNTER:86400:U:U RRA:AVERAGE:0.5:1:2000000' %
                  (name, self.startTime))

        # Fill it
        def fillRRD(lastTime, revision, time, user, lines):
            # Fudge the times a little if necessary so we don't have two updates from the same time
            if time <= lastTime[0]:
                time = lastTime[0] + 1
            os.system('rrdtool update %s %d:%d' % (name, time, revision))
            lastTime[0] = time
        self.walk(fillRRD, [self.startTime])
        
if __name__ == '__main__':
    log = activityLog()
    print "Saving user summary..."
    log.getUserSummary(open("user_summary.html",'w'))
    #log.createRRD('test.rrd')
    ##os.system("rrdtool graph boing.gif -s now-5year DEF:revs=test.rrd:revs:AVERAGE CDEF:f=revs LINE2:f#FF0000")
    #os.system("ee boing.gif")
