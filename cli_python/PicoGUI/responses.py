# handle PicoGUI responses

import struct

# errors (pgresponse_err)

class Error(Exception): pass

class MemoryError(Error): pass
class IOError(Error): pass
class NetworkError(Error): pass
class ParameterError(Error): pass
class HandleError(Error): pass
class InternalError(Error): pass
class BusyError(Error): pass
class FileFormatError(Error): pass
class Dead(Error): pass
def NoError(data):
	return None

_error_types = {
	0x0000: NoError,
	0x0101: MemoryError,
	0x0200: IOError,
	0x0300: NetworkError,
	0x0400: ParameterError,
	0x0500: HandleError,
	0x0600: InternalError,	# shouldn't happen
	0x0700: BusyError,
	0x0800: FileFormatError,
	# 0x8000: ClientError,	# shouldn't happen - generated by us only
	}
	
def _error(args, data):
	id = args[2]
	errt = args[0]
	return id, _error_types[errt](data)

# returns (pgresponse_ret)

def _return(args):
	return args # d' oh

# events (pgresponse_event)

class Event(object):
	'''A PicoGUI Event.
	'''
	def __init__(self, evtype, evfrom, param):
		self.type = evtype
		self.evfrom = evfrom
		self.param = param

def _event(args):
	return None, Event(*args)

# big data (pgresponse_data)

class Data(object):
	'''Encapsulates returned data, which will be in a string format but usually isn't
	really a string. To retrieve the data, call the instance passing a struct format.
	'''
	def __init__(self, data):
		self.data = data
	
	def __call__(self, format):
		return struct.unpack(format, self.data)

def _data(args, data):
	return args[0], Data(data)

_formats = (
  #handler,	format,	offset of data size in the response
  None,						# types start at one
  (_error,	'HHxxL',	1),		# errt, msglen, id
  (_return,	'xxLL',	None),	# id, data
  (_event,	'HLL',	None),	# event, from, param
  (_data,		'xxLL',	1),		# id, size
)

def get(fileobj):
	'''Get (and return) the next response in fileobj
	'''
	def safe_read(len, read=fileobj.read):
		try:
			return read(len)
		except:
			raise Dead()
	type_num, = struct.unpack('!H', safe_read(2))
	handler, format, data_size = _formats[type_num]
	# this is in code to make sure it's enforced
	format = '!' + format
	resp_size = struct.calcsize(format)
	response = struct.unpack(format, safe_read(resp_size))
	if data_size is None:
		# no extra data
		return handler(response)
	else:
		# have to fetch extra data
		return handler(response, safe_read(response[data_size]))

def next(fileobj):
	# call get() and process when necessary
	resp = get(fileobj)[1]
	if isinstance(resp, Exception):
		raise resp
	else:
		return resp
