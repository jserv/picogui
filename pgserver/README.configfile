--------------------- Config file format --------

In addition to the compile-time options that can be browsed and selected
using 'make menuconfig', pgserver has runtime options that can be selected
using the command line or a configuration file.

Configuration settings are loaded and processed in this order:
 - /etc/pgserver.conf
 - ~/.pgserverrc
 - Command line options

In the etc/ directory, a base script called configurator.mk.in
contains code that can generate a pgserver.conf file with sensible
values.

The settings are key-value pairs organized into sections. In the
configuration files, this is represented by the following format
 - Blank lines are ignored
 - Leading and trailing whitespace on comments, keys, or values are ignored
 - Comment lines begin with '#'
 - The current section is set with a "[section]" line
 - Key-value pair lines are in the format "key = value"
 - Set an key to 1 with "key", for boolean values
 - A dash, whitespace(s) and a file name instruct to source the given file
 
For example:
-----------------------8<------------------------
# Sample config file

[pgserver]
xres = 640
yres = 480
fullscreen

. /tmp/more-config-in-this-file

[video-sdl]
caption = Welcome to PicoGUI!

----------------------->8------------------------

Config options can be specified on the command line using the format:
  --section.key=value
If the section is omitted, 'pgserver' is assumed. If the value contains
spaces or other 'strange' characters the whole command line option must be
quoted appropriately. For example:
  pgserver --xres=640 --yres=480 '--video-sdl.caption=Welcome to PicoGUI!'

--------------------- Reference -----------------

[pgserver]

- width
  Default display width in pixels

- height
  Default display height in pixels

- depth
  Default display depth in bits per pixel

- vidflags
  Default video flags (integer)

- mode
  Video mode in the format WxH or WxHxD

- videotest
  If this is set, display the specified video test pattern.
  Set it to "help" to list the possible settings.

- benchmark
  Set this to 1 to enable benchmarking mode

- messagefile
  The name of a file to load internationalized messages/errors from

- themes
  Whitespace-separated list of theme files to load

- input
  Whitespace-separated list of input drivers to load

- rotate
  Number of degrees to rotate the screen. The proper video wrappers must be
  compiled in for this to have any effect.

- session
  A program or shell command to run whenever pgserver starts up. pgserver
  will exit when the last client disconnects

- display
  By giving each PicoGUI server a different display number, you can run
  multiple PicoGUI servers on one computer. The display number should be a
  small nonzero integer. In the current implementation, this is used to
  select a TCP/IP port.

- dragsolid
  Set to nonzero to use solid panel dragging, which is cool but very CPU heavy
  Requires the CONFIG_DRAGSOLID compile-time option

[sound]

- click
  Make a click sound whenever the pointing device is clicked
  (If a loaded driver supports PG_SND_KEYCLICK)
  
- keyclick
  Make a click whenever a key is pressed
  (Also uses PG_SND_KEYCLICK)

[timers]

- cursorhide
  Inactivity time before hiding the cursor, in 1/10 seconds
  Default is infinite

- backlightoff
  Inactivity time before turning off the backlight, in 1/10 seconds
  Default is infinite  

- sleep
  Inactivity time before sleep mode, in 1/10 seconds
  Default is infinite

- vidblank
  Inactivity time before blanking the display, in 1/10 seconds
  Default is infinite

[video-x11]

- caption
  Set the window caption when PicoGUI is run in a window. This is a printf
  format string with 3 integer parameters: width, height, and color depth.

- doublebuffer
  If this is:
    0 - no double buffering at all. Big sprites will flicker a lot, but animation
        will generally be fast.
    1 - double buffer everything. Solves a lot of problems- no flickering at all,
        and expose events are handled much better. However, it will slow everything
        down slightly.
    2 - double buffer large sprites only
        NOTE: Option 2 is only really useful if you have the PicoGUI mouse cursor
              disabled most of the time. It is also a little buggy still...
  The default is 1

- defaultellipse	
  If this is nonzero, the defaultvbl ellipse and fellipse functions are
  used. If it is zero, the X server draws all ellipses and filled ellipses.
  It is faster to let X draw them, but using the defaultvbl ellipse drawing
  code will give the exact same result as when PicoGUI is run on other
  environments.
  The default is zero.

- sound
  Use XBell to handle PGDM_SOUNDFX events.
  This is on my default

[input-x11]

- autowarp
  Automatically detect PicoGUI pointer warping and warp the X cursor.
  This is on by default.

- xcursor
  Display the normal X cursor.
  This is on by default.

- pgcursor
  If this is nonzero, the PicoGUI cursor is shown whenever the mouse is moved.
  This is off by default.  

[video-sdlfb]

- caption
  Set the window caption when PicoGUI is run in a window. This is a printf
  format string with 3 integer parameters: width, height, and color depth.

- fullscreen
  Set to 1 to enable fullscreen mode

- scale
  (requires 'Skin support' config option)
  Set to a number greater than 1 to magnify the video

- background
  (requires 'Skin support' config option)
  Load a bitmap into the framebuffer

- width
  (requires 'Skin support' config option)
  Overrides the framebuffer width. The window is no longer resizeable.

- height
  (requires 'Skin support' config option)
  Overrides the framebuffer height. The window is no longer resizeable.

- display_x
  (requires 'Skin support' config option)
  Offset the display right by this amount within the framebuffer.

- display_y
  (requires 'Skin support' config option)
  Offset the display down by this amount within the framebuffer.

- tint
  (requires 'Skin support' config option)
  Multiply all colors by this color. This can be used to add a green or gray
  tint to LCD screens.

- backlight_tint
  (requires 'Skin support' config option)
  This is used instead of 'tint' when the backlight is turned on.

- simbits
  (requires 'Skin support' config option)
  Set to a nonzero number to force all new colors to this simulated color
  depth. Does not affect the actual framebuffer depth or the background
  or tint color.

- sdc_fg, sdc_bg
  (requires 'secondary display channel' config option)
  Sets the foreground and background colors for SDC output.
  Each of these should be a 6-digit hex number

- sdc_x, sdc_y, sdc_w, sdc_h
  (requires 'secondary display channel' config option)
  Position and size (skin-relative coordinates) to display SDC output.

- sdc_font_name, sdc_font_size, sdc_font_style
  (requires 'secondary display channel' config option)
  Font specification for the SDC output. The style parameter must be the
  decimal equivalent of the PG_FSTYLE flags. Any or all of these parameters
  are optional.

- slowvbl
  (requires the slowvbl to be compiled in)
  Set to nonzero to use the very slow VBL

[video-scrshot]

- file
  A printf format string for generating the screenshot file name.
  Defaults to "pgshot%04d.ppm"

- skip
  The number of frames to skip before recording the first screenshot

- total
  The total number of screenshots to take

[input-sdlinput]

- autowarp
  Automatically detect PicoGUI pointer warping and pass it on to SDL.
  This is on by default.

- sdlcursor
  Display the cursor provided by SDL

- pgcursor
  If this is nonzero, the PicoGUI cursor is shown whenever the mouse is moved.
  This is on by default.

- upmove
  If nonzero, send 'move' events when the mouse button is up
  This is on by default.

- foldbuttons
  Convert all mouse button clicks to button 1, to simulate a one-button
  mouse or touchpad

- nomouse
  Disable normal mouse input. This does not interfere with silkscreen/hardware
  buttons defined by 'map'

- nokeyboard
  Disable normal keyboard input

- map
  (requires 'Skin support' config option)
  This is the filename of an  imagemap defining hotspots on the skin.
  Only rectangles are supported, no polygons or circles. The URL for each
  rectangle is the key number, found in pgkeys.h. I have only tested this
  with maps produced by Gimp's image map plugin. The parser is awfully dumb,
  so don't expect it to work with anything other than Gimp at this time.

- scalemap
  Scale the map by this fraction. (space-separated numerator and denominator)

[video-serial40x4]

- device
  This is the name of the LCD device. LCD commands are sent to this device,
  no ioctl()s are used, and it is never read from. This will usually be a
  symlink to a serial port, but it could theoretically be anything you can
  write to.

[video-fbdev]

- device
  The framebuffer device, defaults to /dev/fb0

- ttydev
  The tty device (for setting graphics mode) defaults to /dev/tty0
  Note: This only works if you're _not_ using VT switching. If you have
        vt switching compiled in, this is determined by the VT pgserver
        should be running on.

- vt
  This can be:
   - "auto", to automatically allocate an available virtual terminal
   - "current", to use the same VT we were started from
   - An integer, to use that VT
  Defaults to "current"

- slowvbl
  Use the slowvbl layer for video debugging if nonzero

- doublebuffer
  If nonzero, doublebuffer the frame-buffer

[input-serialmouse]

- device
  The name of serial port device. Defaults to /dev/ttyS0.

- multiplier
  A value to multiply delta movement by. Defaults to 2.

[input-tuxts]

- showcursor
  Set to 1 to show the cursor on any touchscreen activity. Helpful if you're
  not sure about the calibration.

[input-ucb1x00]

- showcursor
  Set to 1 to show the cursor on any touchscreen activity. Helpful if you're
  not sure about the calibration.

[eventbroker]

- shortbeep_freq
- shortbeep_len
  Frequency and duration of short beep events

- keyclick_freq
- keyclick_len
  Frequency and duration of key click events

[slowvbl]

- delay
  -- BIG FAT HACK ALERT --
  I tried using usleep() to get a very tiny per-pixel delay,
  but even that was too much. This enters a busy loop (ick!)
  for the specified number of iterations. Thankfully, this
  usually isn't necessary because the update() function is
  slow enough.
  Default: 0

- updatefreq
  Only immediately updates every X pixels. If this is an odd
  number and you set updatetype to zero, you get a good stipple
  effect with the hilight color and the actual pixels.
  Default: 3

- updatetype
  If this is:
   0 - only update the pixel itself
   1 - update the line
   2 - update the frame
  Default: 0

- hilight
  Hilight redrawn areas of the screen so you can see when
  something is redrawn multiple times when it hasn't changed
  Default: 1

- hilightcolor
  Hexadecimal color to use for hilighting
  Default: FFFF00

- fastsprites
  When this option is on, the extra hilighting and updating
  is disabled while drawing sprites. This makes the mouse cursor
  much less annoying, but if you're debugging something sprite-
  related, you can turn this off.
  Default: 1

[video-sdlgl]

- caption
  Set the window caption when PicoGUI is run in a window. This is a printf
  format string with 2 integer parameters: width and height.

- fullscreen
  Set to 1 to enable fullscreen mode

- texture_filtering
  This may be "linear" or "nearest". Defaults to "linear". Note that font textures
  always use linear filtering and mipmapping.

- continuous
  Nonzero to update the screen continuously, rather than just when picogui calls for it

- fps_interval
  Floating point number indicating how many seconds between frames per second calculations.
  Larger values give more accurate results, smaller values update the FPS display faster.
  Defaults to 0.25

- osd_fontsize
  Font size to render the onscreen display in

- font_path
  This is the directory to search for TrueType fonts. It's searched recursively,
  and all files ending with .ttf will be loaded.
  Defaults to /usr/share/fonts/truetype

- font_resolution
  This is the size (in points) that the truetype fonts are rendered
  into textures at. Sizes above this can still be output, but the result will be fuzzy. 
  It is usually most efficient for this to be a power of two.
  Defaults to 32

- antialias
  With this option on, all lines and polygons in picogui are antialiased. It makes things
  look a LOT better when the camera controls are used or when anything has a scale or rotation
  applied. This option is _highly_ recommended for any sort of real 3D work, but since
  under normal use it just slows things down it's disabled by default.

- standard_fonts
  This option disables sdlgl's truetype font code and uses PicoGUI's normal font
  renderer. Note that this usually makes rendering _much slower_ since it draws two triangles
  for each pixel rather than taking advantage of texture mapping. Without the 'antialias'
  option on, the standard fonts will look pretty bad when scaled.


--- The End ---

