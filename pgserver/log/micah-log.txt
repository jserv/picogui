2001-05-03    Micah Dowty <micahjd@users.sourceforge.net>

Fixink a couple bugs, continuing from yesterday.
Happy Friday!!!

      * widget/canvas.c: Fixed a subtle bug that caused much groplist
        mangling when using transient nodes.
	
      * gcore/render.c: Added PG_GROPF_UNIVERSAL to always render a node.
        Good for setting transformations, etc.

2001-05-03    Micah Dowty <micahjd@users.sourceforge.net>

I think I'll get this keyboard working, then write some docs. The server
seems to be holding up fine with the new gropnode engine.

      * client_c.h, src/api.c: Added the pgEvalRequest call to the client
      
      * client_c.h, src/api.c: Added the pgFromTempMemory call

2001-05-01    Micah Dowty <micahjd@users.sourceforge.net>

Fixing server bugs. Noticed a couple issues with the 'make install' in
cli_c, but I don't currently know enough about automake to fix it myself:
  - Headers in picogui/*.h aren't installed correctly
  - It doesn't run ldconfig after installing libraries?
Things to double-check in pgserver's build system:
  - Is make menuconfig broke?
  - Some way to prevent accidentally committing a modified config.defaults?

      * widget/canvas.c: Fixed color conversion when making SETCOLOR gropnodes

      * vidbase/linear8.c: Fixed crash bug in line implementation due to 
        16-bit y1 and y2 vars.
	
      * vidbase/linear4.c: Fixed the same problem
      
      * gcore/render.c: Fixed the memory leak (used wrong flag when freeing)
      	This appears to have fixed the black-rectangle bug (disappearing
	setcolor grops) also.
      
      * widget/terminal.c: Fixed up the terminal widget, though it's likely
        that it's rendering will need to be vastly improved soon.

      * gcore/render.c, widget/canvas.c: Added PG_GROPF_COLORED flag to have
        the 'oldskool' method of defining the color with each gropnode.

      * apps/blackout.c: Modifications to support new rendering. Moved
        commands to a menu, started adding support for revealing a solution

      * gcore/render.c: Added support for the first mapping type, PG_MAP_SCALE
		
      * cli_c/demos/pgfx_canvas_persistent.c: Added demonstration
      	of PG_MAP_SCALE

2001-04-30    Micah Dowty <micahjd@users.sourceforge.net>

Just because I'm sick of working on this code outside of CVS and I really
need some motivation to fix it up lately, I committed the video stuff to CVS
yesterday. Still many outstanding issues, as documented in email.
First order of business is the rotation, then fixing the memory cruft in
render.c. Might also want to think about recompatibilizing the other apps. I
should probably write the mapping code and make the virtual keyboard, and
integrate it into a new complete-with-shell Helio ROM.

      * vidwrap/rotate90.c: Really dumb bug in calculating the new angle,
        made rotated charblits segfault. 90 degree rotation works now.
	Thank you ddd! (really nifty debugger)

      * vidwrap/rotate180.c: Starting 180 degree rotation wrapper. Also
        added build system and video core miscellany to enable this
	
      * pgmain.c: Incorporated a small patch into pgmain.c that got lost
        when pgmain moved. This fixes fonts in the video test mode and
	benchmark mode

      * appmgr/global.c: Fixed a quirk in cursor loading that would munge the
        sprite flags, resulting in some extraneous blits that caused a black
	rectangle in the upper-left corner

      * vidwrap/rotate180.c: Finished the core 180 degree rotation code,
        should just be charblit mods to do...

2001-04-24    Micah Dowty <micahjd@users.sourceforge.net>

Almost finished with video reorganization junk. Too many changes to
think about now, it would be 'mind blowing'. Server seems good,
fixed up themes. (Most themes decreased in size due to the changes)
Fixing up apps to use the new structure.
This is the preparatory work for adding cool server-side mappings
and things.
Ugh. Scrolling and terminal widget are still broke in server.

2001-04-20    Micah Dowty <micahjd@users.sourceforge.net>

Starting to modify the video drivers themselves to use the new format.

      * video/svgagl.c: The vgagl driver has gotten way out of sync with the
        rest, so I'm (temporarily?) retiring it to cut down on maintenance.

2001-04-19    Micah Dowty <micahjd@users.sourceforge.net>

Finished redoing the header files, rendering engine, and defaultvbl. Too
many changes to list here, just assume that that I had to change every file :)

2001-04-18    Micah Dowty <micahjd@users.sourceforge.net>

Ah. I got the Helio stuff released on the PicoGUI web site last night. Time
to start refixing the video stuff. Goals for this mini-overhaul are:
 - Decrease the size of the gropnode by storing persistant state of the
   rendering engine between gropnodes
 - Flexible clipping
 - LGOPs work for any primitive
 - Rendering to screen or device-dependent bitmaps
 - Gropnode coordinate transformations
 
      * include/picogui/constants.h: Reworked gropnode format and lgops

      * include/pgserver/divtree.h: gropnode stuff removed
      
      * include/pgserver/render.h: gropnode stuff put here
      
      * gcore/grop.c: rendering engine removed, now only contains memory
        management sorts of code
	
      * gcore/render.c: Adding new rendering engine code here. The grop_render
        function was getting horribly long and unmanageable, weighing in
	at over 500 lines. Added a new structure for storing rendering state,
	splitting up rendering into more discrete functions. Also separating
	screen-dependant code out so another function can be added to render
	into bitmaps.

2001-04-17    Micah Dowty <micahjd@users.sourceforge.net>

After reading the mips version of stdarg.h, it all made sense. Now i can fix
some non-fatal bugs, put up a how-to web page for the helio port, and start
the next video overhaul. (to add some important new engine features and
uncruftify a bit)

      * cli_c/src/api.c: Modified calls to va_arg to use the correct types.
        As noted in stdarg.h's source, va_arg(...,short) isn't valid in mips
	
      * widget/panel.c: The panel dropped sprites on the floor, had to pick
        them up. Fixed the condition in which a second mouse press without
	a release causes a memory leak and potential segfault. (sprite
	referencing invalid bitmap)
	
      * input/r3912ts.c: Added smarter handling of up/down triggers and
        out-of-bounds conditions.

      * vidwrap/rotate90.c: Wouldn't compile when XBM was disabled, fixed
        the #ifdefs

      * Helio.config: Added a copy of the .config I used with the Helio
      

2001-04-16    Micah Dowty <micahjd@users.sourceforge.net>

Considering there are now two major things I need to add to the video
drivers, global support for lgops and rendering to any bitmap, I should
probably do that before writing any more optimized primitives.
I wanted to take a little break first to fix up the lcdmono theme some.
The Helio port is nice, especially with working power management, but the
annoying problem of blank buttons and nonfunctional app still looms over the
whole thing. Many debug statements later I traced the problem to
pgSetWidget.

      * themetools/examples/data/mono*.pbm: Added 9x9 mono icons
      
      * themetools/examples/lcdmono.ths: Many improvements for
        better look in general and better look on 1bpp devices

2001-04-15    Micah Dowty <micahjd@users.sourceforge.net>

Started porting PicoGUI to the VTech Helio, which mostly involved hacking at
various kernels.

      * input/r3912ts.c: New touchscreen driver for the Linux-VR kernel

2001-04-14    Micah Dowty <micahjd@users.sourceforge.net>

Argh, I'm getting lazy with the website/log updates

      * vidbase/defaultvbl.c: Fixed 90 degree rotation crash bug
      
      * input/ncursesinput.c: Added a hack to prevent screen clearing by
        ncurses when a key is pressed
	
      * Makefile: Adding support for linux on mips CPUs for the Helio port
      
      * config.in: Adding config options for linux on mips

2001-04-13    Micah Dowty <micahjd@users.sourceforge.net>

Ha. Just noticed that today's a Friday the 13th. Neat...
Anyway, I'm anxious to get PicoGUI running on the Helio, but I need to
finish my top-priority-todo-items first.

      * cli_c/src/pgfx_canvas.c: Adding primitive implementations for the
        PGFX_PERSISTENT mode
	
      * cli_c/demos/pgfx_canvas_persistent.c: Small snippet to illustrate
        persistent mode with the canvas

      * gcore/grop.c: Adding 'transient' gropnodes for immediate-mode
        grop rendering. Adding a 'zombie list' to cache allocated gropnodes.
	This should make both immediate mode and normal gropnode rendering
	faster by eliminating almost all memory allocs
	
      * widget/widget.c: Added zombie grop stats to the memory debug
        guru screen
	
      * cli_c/src/pgfx_canvas.c: Adding support for the PGFX_IMMEDIATE
        mode using the new PG_GROPF_TRANSIENT flag
	
      * cli_c/demos/pgfx_canvas_immediate.c: Snippet to illustrate animation
        using immediate mode

      * widget/canvas.c: Fixed bad use of grop_ctxt that assumed the groplist
        wouldn't change structure while rendering
	
      * include/pgserver/divtree.h: Added a flag to divnode that specifies
        whether the groplist has been rearranged by transient node deletion
	
      * config.in: Added an option to specify maximum number of zombie grops

2001-04-12    Micah Dowty <micahjd@users.sourceforge.net>

Starting the abstract graphics interface in the client.
Got my Helio in today! It's a pretty nifty piece of hardware. I tried the
pocketlinux and vhl-tools linux distros on it. Pocketlinux is quite sluggish
even on that 75mhz CPU, but otherwise is pretty neat. vhl-tools starts up a
neat "W" interface, and can access all hardware fine except the power
management, hardware buttons, and audio. I'll have to try some of the latest
Linux VR code on it to see if that's been fixed.

      * include/picogui/pgfx.h: Defined the abstract graphics interface, pgfx
      
      * cli_c/src/pgfx.c: General utilities
      
      * cli_c/src/pgfx_canvas.c: Started PGFX lib for canvas drawing

2001-04-11    Micah Dowty <micahjd@users.sourceforge.net>

Today I wrote the new Perl client library.
I did end up ordering a VTech Helio yesterday, so I should have a portable
platform that will run Linux well soon.

2001-04-10    Micah Dowty <micahjd@users.sourceforge.net>

Well, now I've killed the bugs that were bothering people and at least know
(hopefully) where the others are, I'm going to go back to finishing the video
code. Some of the other things I need to do soon are write a loader for BMP
images, and start the nifty text layout engine.
I'd also like to get this running on some actual handheld hardware. I was
thinking of the Agenda VR3, but the company seems to be on the way down due
to bad management, and the hardware has crummy battery life. The VTech Helio
seems like a good piece of hardware, has good Linux support, and doesn't
even run WinCE! I've still got that Philips Nino to try a WinCE port on, but
I'm really not looking forward to that.

      * vidbase/defaultvbl.c: Fixed a bug in tiled blit()s that made the
        background shift in weird ways
	
      * gcore/pgmain.c: Fixed crash bug when theme and video were specified
        on the command line: reload_initial_themes would be called
	before initialization was completed
	
      * vidbase/linear8.c: Unbroke the tileblit, so aqua (and other bitmapped
        themes) no longer crash it

      * vidbase/defaultvbl.c: Fixed up the default color conversions

      * vidbase/linear(16|8|4|2|1).c: Removed custom color conversions.
        The one in defaultvbl works fine, and is not significantly slower
	
      * debug/videotest.c: To quantitatively measure video driver performance,
        added a benchmarking system (-m command line option)

2001-04-09    Micah Dowty <micahjd@users.sourceforge.net>

Compared the handle tree dumps, and the handle tree stays the same throughout!
So, maybe it's not a nasty handle bug, but something else... Noticed that
after the first theme load/unload cycle a few extra grops are present, but
between cycles 8 and 9 no memory changes.

Ha! Found some quite weird results in the gropnode dumps, and traced it to
some bad handles in position_button. Found a bug in the code to allow themes
to customize button bitmaps and text. Fixed this, (and some related bugs
in button_set) and that fixed the gropnode problems, AND made the theme
load/unload cycle bug go away!

      * widget/widget.c: Added CTRL-ALT-N gropNode dump

      * widget/button.c: Added sanity checking to position_button

      * widget/button.c: Found _a_ bug... Fixed theme-controlled button
        properties so they are correctly unloaded. This caused at least a few
	extra-weird gropnodes and rdhandle failures.

      * apps/gremlin/gremlin.c: Added a new debugging app, an automated tester
        program a la "Gremlins" for PalmOS.

      * widget/terminal.c: Gremlins found a memory leak in the terminal
        widget, twas easy to fix

2001-04-08    Micah Dowty <micahjd@users.sourceforge.net>

I think the only way to figure out what's really happening is to add a debug
key to do a full dump of the handle tree. Hey, it couldn't be _that_ big,
could it?  ;-)

      * widget/widget.c: Adding CTRL-ALT-H hotkey
      
      * gcore/handle.c: Added handle_dump call

      * config.help: Added documentation for CTRL-ALT-H

2001-04-07    Micah Dowty <micahjd@users.sourceforge.net>

Fixing some bugs. The fraction sizing + themes bug reported by philippe is
caused by the widgets' resize functions assuming the 'split' value is in
pixels. What this actually boils down to is, when the size or sizemode values
are set, the widget needs to leave the widget's sizing alone.

      * include/pgserver/widget.h: Added the 'sizelock' variable to
        the widget structure, to prevent automatic resizing when the
	app sizes manually.
	
      * widget/widget.c,gcore/handle.c: Moved resizeall() to widget.c since
        it no longer depends on direct handle tree access

      * widget/widget.c: Turns sizelock on when size or sizemode are changed
      
      * Added support for sizelock to all resize functions where applicable
      
      * widget/button.c: "Fixed" position_button() ignoring rdhandle errors,
        which causes a crash on theme unload
	
      * gcore/handle.c: Fixed an error-handling goofup in rdhandle that
        would cause a crash on any rdhandle failure... sometimes. Gotta
	love pointers!
	
      * gcore/handle.c: I think I've tracked this mess down to another
        handle system bug. I added more handle debugging. Turn on
	DEBUG_MEMORY, and grep output for 'handle'
      
      
2001-04-05    Micah Dowty <micahjd@users.sourceforge.net>

Adding the support necessary for the server to remember loaded themes so it
can reload them when the driver changes.

      * gcore/pgmain.c: Made the theme list a little more efficient, and
        postponed deleting it until cleanup. Added reload_initial_themes()
	to use this list to reload themes into memory
	
      * include/pgserver/pgmain.c: Added the reload_initial_themes() function
        prototype
	
      * gcore/video.c: Added call to reload_initial_themes() when setting
        the video mode

2001-04-04    Micah Dowty <micahjd@users.sourceforge.net>

In working on video mode code, found an old bug bothering me: closing a
popup box that isn't on top instead deletes the top popup box's divtree and
leaves a blank divtree that freezes the screen. This bug is demonstrated
when, in omnibar, the vidpopup app starts before it closes the application
menu.

Got the mode conversion working! Because PicoGUI only stores bitmaps in the
device-dependant format, detail is permanently lost when converting to a
lower bpp. For this reason, themes and possibly app bitmaps should be reloaded
when switching to a higher bpp. There will be a new event to request
reloading from the client, and the server will automatically be able to
reload (from file) all themes passed on the command line.

      * vidwrap/rotate90.c: Removed the 'iterate for all bitmaps' code
        to place it in its own function
	
      * gcore/video.c: Added a utility function, bitmap_iterate, that calls
        a callback function for all loaded bitmaps, added calls to modeconvert
	and modeunconvert in setmode.
	
      * widget/widget.c: Renaming reset_pointer() to reset_widget_pointers()
        so it can stop confusing me
	
      * gcore/div.c: dts_pop() now makes you specify which divtree to delete
      
      * widget/popup.c: Changed for new dts_pop() syntax (currently this is
        the only place dts_push() and dts_pop() are used)
	
      * gcore/g_error.c: Added code to guru() so it mirrors its messages
        on stderr

      * config.in: Added compile-time option to control stderr GURU output

      * gcore/defaultvbl.c: Added the actual depth-conversion loops in
        modeconvert and modeunconvert. Now the runtime depth switching works!

      * cli_c/demos/omnibar.c: Fixed a divide-by-zero SIGFPE that I noticed.
        It's interesting how testing PicoGUI on computers of all different
	speeds helps catch the weird race conditions :)
	
      * widget/canvas.c: Fixed a bug in colorconv as pointed out by Oliver
        that prevented colored text from converting properly

      * widget/flatbutton.c: Added all 7 lines of code it takes to make a
        customized button
	
      * include/picogui/constants.h: Added new theme objects and widget type
        for flatbutton
      
      * widget/widget.c: Added widget table entry for flatbutton
      
      * include/pgserver/widget.h: Added widget prototype for flatbutton
      
      * theme/memtheme.c: Added theme inheritance entries for the
        flatbutton's new theme objects

      * Makefile: Added widget/flatbutton.c to project

      * cli_c/include/picogui/constants.h: Synchronized to server
      
      * cli_c/demos/demo.c: Added a flatbutton widget

      * theme/memtheme.c: Revised flatbutton inheritance defaults so the
        defaults will work most of the time

2001-04-03    Micah Dowty <micahjd@users.sourceforge.net>

Got linux booting on the Nino ok, but the framebuffer doesn't work.

2001-04-02    Micah Dowty <micahjd@users.sourceforge.net>

I didn't get much done over spring break, but maybe I'll get a lot done today!
(Hahahaha!) Oh well...
Nifty!! A friend of the network admin here at our school had an extra
"Palm-Size" PC, a Philips Nino 300-series with 8MB memory. You know what
they say about giving geeks hardware! Expect a PicoGUI port to this soon. It
runs WinCE (which I discovered is awfully confusing on a palm computer) so
maybe a PicoGUI port to WinCE is in order first, but it it reported to run
Linux too!
      
      * include/pgserver/video.h: Adding new video functions to convert
        between depths at runtime. Similar to entermode and exitmode, the
	function bitmap_modeconvert and bitmap_modeunconvert convert a bitmap
	between a linear array of 32-bit pgcolors and a color-depth-specific
	format used by the driver.

2001-03-30    Micah Dowty <micahjd@users.sourceforge.net>

Still don't have bit depth changing working correctly, but there are a lot
of little things I had to fix here and there...
Happy Friday!

      * widget/popup_nobar.c: Resurrected the no-panelbar support from some
        backups when I realized it wasn't in CVS

      * widget/field.c: Fixed bug in cursor positioning when PG_WP_TEXT is set

<<<<<<< micah-log.txt
      * widget/widget.c: For better mode switch and memory utilization info,
        adding CTRL-ALT-P (for pictures?) to show all loaded bitmaps

=======
      * widget/widget.c: Added a new debugging key, CTRL-ALT-P, to display
        all loaded bitmaps

>>>>>>> 1.41
2001-03-29    Micah Dowty <micahjd@users.sourceforge.net>

Ugh. Spent the last 3 days installing a network for some jerk who doesn't
deserve it. On top of that, a debian upgrade messed up xlib and aalib so I
couldn't compile PicoGUI for a few hours today. Anyway...
In preparation for a video mode setting app I'm adding a checkbox widget.
There is now a new EXEV flag, PG_EXEV_TOGGLE, that makes a button
'push-on-push-off' the checkbox widget turns this flag on and uses a
separate theme object to create a checkbox's look and workings.

      * widget/checkbox.c: A little code to customize a button, just like in
        menuitem.c
	
      * widget/button.c: Added a new EXEV flag so a click toggles the button
        state, for push-on-push-off buttons
	
      * widget/widget.c, Makefile, include/picogui/constants.h,
        include/pgserver/widget.h: Added checkbox widget

      * theme/thobjtab.c: Added theme inheritance entries for the checkbox's
        theme objects.
	
      * demos/demo.c: Added examples of a toggle button and checkbox

      * widget/button.c: Added an experimental PG_WP_ON property to get/set
        the toggle state of a button/checkbox/radiobutton/etc

      * examples/pseudo3d.ths: Added good checkbox support- put together a
        small code fragment to make a bitmapped checkbox that is reused in
	a few other themes.
 
      * examples/aqua.ths: Added good checkbox support
      
      * examples/classic256.ths: Added minimal checkbox support
      
      * examples/flat16.ths: Added neat checkbox support
      
      * examples/nifty3d.ths: Added good checkbox support

      * examples/pastel_light.ths: Added good checkbox support

      * widget/button.c: Fixed small bug in sizing vertical buttons, it wasn't
        accounting for the small space between them.
	
      * demos/vidpopup.c: Started work on a small video mode selector popup
        menu. This will (someday??) be integrated into pgl, the PicoGUI
	Launcher yet-to-be-written

      * net/requests.inc,include/picogui/network.h,net/dispatch.c: Added a new
        request, getmode, that returns a pgmodeinfo structure with details on
	the current video mode
	
      * cli_c/include/picogui/client_c.h: Added pgGetVideoMode prototype
      
      * cli_c/src/api.c: Added pgGetVideoMode implementation

      * cli_c/src/netcore.c: Added some measure of SIGSEGV and SIGFPE handling
        via PicoGUI's error handler mechanism
	
      * widget/field.c: Added PG_WP_TEXT set capability, fields are now
        read/write
      
2001-03-25    Micah Dowty <micahjd@users.sourceforge.net>

Well, I'm on spring break now! So, aside from the multiplayer gaming, I have
plenty of time to code :)

      * vidbase/defaultvbl.c: Fixed charblit_u clipping
      
      * Removed some obsolete themes

      * video/sdlfb.c: Added SDL_RESIZABLE flag

      * video/sdlinput.c: Added call to video_setmode() on window resize

2001-03-23    Micah Dowty <micahjd@users.sourceforge.net>

Cleaning up a few remaining issues... After that, I'm planning on
implementing the necessary bitmap conversions to make depth switching work
right. With all these things that can now be changed at runtime it would be
nice to make some sort of menu to do it from. Ah, that's what pgl was going
to be for :)

      * config.defaults: Updated defaults, including rotation on by default
            
      * gcore/pgmain.c: Added -r command line option to rotate by default
      
      * vidwrap/rotate90.c: Now checks whether cursor is allocated before
        rotating it, this prevents segfault with -r flag.

      * include/pgserver/handle.h: Changed return type of handle_iterate to
        g_error from void
	
      * gcore/handle.c: Made changes necessary for handle_iterate to return
        errors from iterator functions.

      * vidwrap_rotate90.c: Added error checking to rotate90_entermode

      * include/pgserver/video.h: Made charblit_u conditionally compile;
        only needed when CONFIG_ROTATE is on
	
      * vidwrap/rotate90.c: Rotated charblit_v now uses charblit_u
	
      * vidbase/defaultvbl.c: Adding a reference implementation of charblit_u

2001-03-22    Micah Dowty <micahjd@users.sourceforge.net>

Happy Friday! (my last day of school before spring break)
I'm cleaning up the aftermath of yesterday's hasty rotation coding. This
includes fixing remaining bugs, and integrating the changes into video
drivers other than sdlfb and ez328.

      * gcore/video.c: A small bug in the root divnode resizing loop prevented
        layers other than the bottom one from updating. Now the screen can be
	resized/rotated while a menu or dialog is onscreen.
	
      * widget/popup.c: Separated popup clipping code into the new
        clip_popup() function

      * include/pgserver/widget.h: Added clip_popup()
      
      * gcore/video.c: Added code to clip any onscreen popups so they don't
        redraw past the edge of the screen and segfault
	
      * include/pgserver/divtree.h: Changed the 'split' variable to a signed
        16-bit integer to avoid problems with wrap-around

      * video/ncurses.c: Removed mode parameters from it's init function
      
      * video/null.c: Removed params from init, added a dummy setmode()

      * appmgr/global.c: Fixed memory leak. Default cursor bitmaps were not
        getting freed on shutdown

      * include/pgserver/video.h: Added charblit_u function for upside-down
        text blits (rotated charblit_v)

2001-03-21    Micah Dowty <micahjd@users.sourceforge.net>

Shortly after committing the rotation code with runtime mode switching, I
found a few bugs...
      
      * vidbase/defaultvbl.c: Fixed some faulty logic in
        def_bitmap_rotate90() that broke rotation in modes less than 8bpp
	
