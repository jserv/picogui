2001-08-13    Micah Dowty <micahjd@users.sourceforge.net>

Am fixink bugs and cleaning up scrolling some. I also need to get that extra
hotspot stuff in sdlinput written so that silkscreen and hardware buttons in
skins work.
 
      * themetools/examples/lcdmono.ths: Reniftified the scroll bars
 
      * widget/scroll.c: Adding extra error checking to scroll resolution,
		  adding support for auto-hiding the scroll bars when it's not necessary.

		* input/sdlinput.c: Added a (really dumb) parser for using HTML image
		  maps to define silkscreen/hardware buttons in skins
		  
		* skin/*.map: Added image maps for all skins. The silkscreen buttons are
		  for now just being mapped to the function keys. This should be what
		  the actual hardware does, but if not it can be easily changed.
		


2001-08-12    Micah Dowty <micahjd@users.sourceforge.net>

Just for fun, but also to make the development environment for embedded
systems as realistic as possible, I'm writing support for 'skins' into
PicoGUI that can make it look and act very much like a particular handheld.
This just means adding more config options to the SDL video and input
drivers, and writing some config files for the skins.

      * README.configfile: Added many new options to sdlfb and sdlinput
      
      * skin/helio*: Added some example Helio skins

		* skin/*: Added nifty VR3 and Chipslice skins


2001-08-11    Micah Dowty <micahjd@users.sourceforge.net>

Writing a couple more test applets that will be used in PGL. I'm waiting on
some info from Pascal before starting the rest of PGL.

      * apps/pgl/applets/pgl-backlight.c: Wrote a simple backlight on/off
        button applet

      * apps/pgl/applets/pgl-cpu.c: Copied a CPU monitor mostly from omnibar
		
		* apps/pgl/applets/pgl-battery-helio.c: Converted omnibar-helio's
		  battery monitor to an applet

2001-08-10    Micah Dowty <micahjd@users.sourceforge.net>

I don't have the specs for PGL itself yet, but I'm sure writing PGL applets
will be useful. I'm starting with a clock, the must-have applet. Other
applets like a backlight control will follow. Of course I'm also fixing bugs
in pgserver and occasionally tossing in the odd feature here and there.

      * widget/button.c: Fixed some errors in position_button()'s error
        handling. This was causing those guru messages, and in some cases
	segfaults. Now instead of segfaulting if you delete a button's font,
	it will fall back on the theme's button font or in extreme cases
	the default font.
	
      * apps/pgl/applets/pgl-clock.c: Finished a rather nifty configurable
        clock applet

2001-08-08    Micah Dowty <micahjd@users.sourceforge.net>

I'm starting Applet support, for PGL, today. An application should be able
to create a named public container, and another application should be able
to reference that container by name and create a root widget inside it.

      * widget/scroll.c: Fixed the segfault bug that Olivier found.
		
      * include/picogui/constants.h: Adding the PG_WP_NAME property
		
      * widget/widget.c: Implmenting the PG_WP_NAME property for all widgets

      * include/picogui/network.h: Adding PGREQ_FINDWIDGET
		
      * net/dispatch.c: Implemented PGREQ_FINDWIDGET

      * cli_c/src/api.c: Implemented pgFindWidget
		
      * include/picogui/constants.h: Added the PG_WP_PUBLICBOX
		
		* net/dispatch.c, widget/widget.c: Implemented the PG_WP_PUBLICBOX flag

		* cli_c/src/netcore.c: Added the --pgapplet parameter to make any
		  program an applet

		* apps/pgl/applets/*.c: Writing some applets for PGL

2001-08-05    Micah Dowty <micahjd@users.sourceforge.net>

The last thing I think I need to finish up for the standard dialogs to be
complete is: Icons! I just need to add theme properties for common dialog
icons, use these icons in the standard dialogs, then make an icon theme or
two.

      * themetools/themec/pgtheme.y: Found the bug preventing themec from
		  working on big-endian systems
		  
		* include/picogui/constants.h: Added more icon theme properties
		
		* images/icons/*: Adding icons themselves

		* themetools/examples/icon_color.th, icon_color_large.th: Added icon
		  themes
		  
		* include/picogui/constants.h: Removed MSGBTN constants
		
		* cli_c/include/picogui/client_c.h: Added MSGBTN constants, plus
		  new constants for choosing icons
		  
		* cli_c/src/stddialog.c: Added support for message dialog icons
		
		* cli_c/src/netcore.c: Added PG_MSGICON_ERROR to error dialog

2001-08-04    Micah Dowty <micahjd@users.sourceforge.net>

Yay, the file dialog is finally done. It has some powerful features: You can
create directories, delete, and rename/move files right in the file dialog.
I also use columns in the browser to display the name and size of each file.
All that's left in standard dialog support (I think) is the color picker,
standard icons, and good scrolling. Since the scrolling is by far the most
difficult of these three, of course I decided to do it first :)
-
Requirements for scrolling:
 - Divnodes and hotspots translated by tx,ty at redraw time
 - Divnode size set equal to the preferred size in the dimensions
   that can scroll, during recalc
 - Scrolled node and all children are also clipped to the scrolled
   node's original size. The nodes' clip rectangles are set at
	calc time, and this rect is combined with each node's translated
	clipping rectangle at redraw
						      
      * widget/widget.c: PG_WP_SCROLL is now implemented for all widgets
		
		* widget/label.c: Removing PG_WP_VIRTUALH, now we can just use the
		  preferred size

		* include/pgserver/divtree.h: Added 3 new divnode flags for scrolling
		
		* gcore/div.c: Implemented new flags during recalc
		
		* gcore/render.c: Implemented divscroll translation and clipping
		
		* cli_c/src/dlg_colorpicker.c: Wrote a simple color picker
		
		* widget/scroll.c: Fixed bugs

		* vidbase/defaultvbl.c, vidbase/linear8.c: Fixing charblit()
		  clipping bug: clip rectangles can now be shorter than the height
		  of one character with no problems
		  
		* gcore/render.c: Implementing scroll-only redraws

		* widget/label.c: Removed PG_GROPF_TRANSLATE (messes up new scrolling)
		
		* vidbase/defaultvbl.c: Implemented a default version of scrollblit()
		  for doing bottom-up blits when scrolling
		  
		* gcore/div.c: scroll-only redraws now propagate only a scroll-only
		  redraw to the 'div' child, not a full redraw.
		  
		* gcore/render.c: More rendering engine changes so children of scrolling
		  boxes are clipped correctly

2001-08-03    Micah Dowty <micahjd@users.sourceforge.net>

While adding that PGREQ_DUP code, I fixed what I'm now almost positive was
the cause of that dreaded handle bug! In mkhandlep(), the 'group' handle
for each handlenode was not initialized.
I have finished the string input dialog and a font picker dialog. Added a
new API to get info on available fontstyles. I got a file picker dialog
almost completely working outside the client lib source, then copied all 500
lines of it into the client lib.
I apologize for the sparse logs the last couple of days. I've been furiously
trying to catch up with Smartdata's schedule. Most of the more recent items
have been taking much longer than they estimated.

      * cli_c/src/dlg_filepicker.c: Added directory popup menu

		* include/picogui/constants.h: Adding constants for listitem widget
		
		* widgets/widget.c: Added widget table entry for listitem
		
		* include/pgserver/widget.h: Added prototype macro for listitem
		
		* widget/listitem.c: Added listitem initialization function
		
		* theme/memtheme.c: Added theme inheritance for listitem

		* include/picogui/constants.h: Added PG_EXEV_EXCLUSIVE supporting
		  mutually exclusive buttons like radio buttons and list items

		* widget/button.c: The widget activate event should be sent
		  when the state of a toggle button changes, not when the mouse
		  is released.
		  
		* widget/button.c: Implemented mutually exclusive buttons
		
		* cli_c/src/dlg_fontpicker.c: Now using the listitem widget
		
		* cli_c/src/dlg_filepicker.c: Turns off all EXEVs for directories
		  so they work like buttons
		  
		* include/pgserver/divtree.h: Added the DIVNODE_NOSQUISH flag
		
		* gcore/div.c: Implementing the DIVNODE_NOSQUISH flag
		
		* widget/button.c: Adding the NOSQUISH flag to buttons by default.
		  This way toolbars can contain many items and gracefully degrade to
		  small screens by hiding less important items

2001-08-01    Micah Dowty <micahjd@users.sourceforge.net>

I've been working on the standard dialogs out of CVS, at least for
experimentation. Since this is all client side anyway, it's easiest to work
on a small standalone client program then copy the dialog code into the
client library..
I have the string input dialog almost complete. I just need to work out the
issue of where the string returned to the caller is stored. What might be
useful here is a string duplication function and a function to change the
context level of an object.
The file dialog requires more complicated scrolling than PicoGUI currently
supports, and I've been thinking about how to implement it. I'd like to be
able to attach a scroll widget to a box, and be able to scroll all widgets
in the box.
I started a color picker dialog, but it will be a little difficult finding a
way to pick a color that works on so many different devices. I will probably
just have many types of color pickers, allowing the user to pick a picker :)
The font dialog should be easy, but it needs the new scrolling plus a way to
enumerate the available fonts.
Maybe I should just make a stub property that allows binding a scroll widget
to a box without error, and actually implement the scrolling a little later.

      * net/dispatch.c, net/requests.inc, gcore/handle.c, etc: Added the 
		  PGREQ_DUP and PGREQ_CHCONTEXT requests, for duplicating an 
		  object and changing its context, respectively.

2001-07-27    Micah Dowty <micahjd@users.sourceforge.net>

I'm starting standard dialog support today. Probably the largest decision to
make here is what to implement in the server and what to implement in the
client. The dialogs can't be implemented completely in the server, and
implementing them partially in each (like the message dialogs and menus are
done already) would probably just complicate things. The standard dialogs
and the existing dialog code (message boxes and menus) will be moved to a
seperate module in the client library, like PGFX.

      * net/dispatch.c: Removed the server requests for making
		  message dialogs and menus
		  
		* cli_c/src/stddialog.c: moved pgDialog, pgMessageDialog,
		  pgMessageDialogFmt, pgMenuFromString, and pgMenuFromArray to
		  this file and removed all code dependant on the server requests.
		  All this now uses the normal PicoGUI API and is smaller than
		  the original low-level code. Not to mention easier to read!

2001-07-25    Micah Dowty <micahjd@users.sourceforge.net>

Just a few things to finish up with the darn popup nontoolbar area stuff...
- Redraw/reclip when toolbars are added or deleted and a popup is onscreen
- Make this stuff work with hotspots.

      * gcore/div.c: Added a flag to reclip popups on update
		
		* appmgr/global.c: Redraw when a toolbar app is registered
		 
		* widget/toolbar.c: Redraw when a root toolbar is destroyed
		  behind a nontoolbar popup
		  
		* gcore/hotspot.c: Add toolbars to hotspot graph when necessary

2001-07-24    Micah Dowty <micahjd@users.sourceforge.net>

One last thing that needs to be done to the keyboard now... Making it usable
when popup boxes are on the screen. I think the best solution to this is to
make toolbars usable when popups are on the screen.
To determine the non-toolbar area that popups can occupy, the htbboundary
handle is dereferenced to find the toolbar on the edge of the boundary between
toolbars and application panels. The area is defined by the divnode
wtbboundary->next.
-
I implemented this clipping within the nontoolbar area, and it seems just
great for most dialogs but menus are a bit messed up by it. Looks like we
need a flag to disable this new code for some popups, like menus. I will add
code to disable the extra clipping when the popup is created at the cursor
position. (which is the easiest way to check if it is a menu)

      * appmgr/global.c: Added the appmgr_nontoolbar_area() function
		  to return a divnode describing the size of the nontoolbar area
		
		* widget/popup.c: Mangled up clip_popup() a bit to clip popups within
		  the nontoolbar area instead of the screen.

		* include/pgserver/divtree.h: Added the DIVNODE_POPUP_NONTOOLBAR
		  flag that will trigger the extra clipping and other modifications
		  for non-menu popups.
		  
		* widget/widget.c: Events occuring within toolbars when qualifying popup
		  boxes are onscreen are passed through to the root divtree
		  
		* gcore/div.c: Added a little hack to allow toolbar updates through
        when all popups are in the nontoolbar area
		  
		* theme/memtheme.c: theme_setstate now does a SubUpdate as long as the
		  'force' flag is zero, otherwise a normal update is done. Now almost
		  all widgets (I think all except scrollbars) should work within toolbars
		  when popups are onscreen.
		  
		* widget/popup.c: When a popup is closed, the nontoolbar region is
		  not redrawn unless there is a menu on the screen also
		  
		* appmgr/global.c: For the user to pop up an onscreen keyboard while in
		  a dialog box, adding a toolbar app needs to recalc everything and
		  reclip the popups.

2001-07-23    Micah Dowty <micahjd@users.sourceforge.net>

To make this keyboard usable on the Helio and VR3, and to give the Chipslice
an alternate layout, I finished the 160x60 FITALY layout. Well, except for the
number and symbol patterns...
But it's usable.

      * apps/pgboard/examples/us_fitaly_160.kbs: Wrote the FITALY keyboard
		  source and added bitmaps
		
2001-07-22    Micah Dowty <micahjd@users.sourceforge.net>

I think I now have the keyboard interpreter, keyboard compiler, and one
keyboard definition completed. The completed keyboard is a scalable QWERTY
keyboard with separate patterns for shift, caps lock, control, symbols, and
the numeric keypad. A bitmapped FITALY keyboard layout is also planned, and
the pgboard application still needs a couple features:

- Currently it is impossible to input text into popup boxes. I need to
  discuss possible solutions to this on the mailing list

- It would be nice to have some sort of auto-completion like on
  Qt/Embedded's virtual keyboard

      * widget/toolbar.c: Implemented PG_WP_TRANSPARENT to remove the border
		  and suppress redrawing the background
		  
		* apps/pgboard/kboompile.pl: Finished up the new keyboard compiler
		
		* apps/pgboard/Makefile: The makefile now automatically compiles
		  and .kbs files in the examples directory
		  
		* apps/pgboard/examples/us_qwerty_scalable.kbs: Wrote a nifty
		  scalable QWERTY keyboard for the new Perl keyboard compiler

2001-07-19    Micah Dowty <micahjd@users.sourceforge.net>

Well, i would eventually like to write a sort of PicoGUI drawing program
that can save a binary canvas command file. But, until then, I think I'll
just write a better ASCII format for the keyboards and get on with writing
them by hand.

      * apps/pgboard/kbcompile.pl: Overhauling the keyboard compiler, making
		  a system to define keyboards with perl scripts, saving the output
		  of PGFX-like drawing commands to a binary chunk of canvas commands.

2001-07-18    Micah Dowty <micahjd@users.sourceforge.net>

Finishing the virtual keyboard.
-
The virtual keyboard interpreter, pgboard, is (for now) finished. It can
display a pattern, and react to buttons by sending a key event and/or jumping
to another pattern. Now all that is needed is a good way to generate these
keyboard files. A converter script for generating the binary keyboard file
from an ascii keyboard file is already done, but even the ascii keyboard
file is very tedious to edit by hand.
I'm researching various vector graphics formats, hoping that an
off-the-shelf open source vector graphics program can be used to draw the
keyboards, then a script could convert them.

      * widget/canvas.c: Added the capability to pass on 'release' events
		  to the client.
		  
		* apps/pgboard/main.c: Cleaned up XOR handling for the buttons:
		  using PGFX now, correct handling of mouse events
		
		* apps/pgboard/main.c: Added pattern jump support

2001-07-10    Micah Dowty <micahjd@users.sourceforge.net>

Well, I'm supposed to be done with this meta-input stuff today. After that
I'll be finishing the virtual keyboard. Starting off finishing the bugs
I left off with yesterday.

      * net/dispatch.c: Added the PGREQ_LOADDRIVER to load an input driver
		  and get a handle to it.

		* gcore/hotspot.c: Fixed coordinate translation bug
		  (silly me, I used an int instead of a s16 for the coords)
		  
		* include/pgserver/video.h: Added the coord_keyrotate vidlib function
		
		* widget/widget.c: Call coord_keyrotate to translate key input
		
		* vidwrap/*.c: Implemented coord_keyrotate

2001-07-10    Micah Dowty <micahjd@users.sourceforge.net>

Fixing a few bugs, continuing on the meta-input features.
-
Still one feature to add for the meta-input phase (I think):
 - Client-side loading and unloading of input drivers
And a few bugs related to physical/logical coordinate translation:
 - Hotspots don't work when the screen is rotated
 - The screensaver segfaults when rotated 90 degrees


	   * widget/scroll.c: Fixed the scrollbar drag bug pointed out by Philippe

		* widget/widget.c: Reworked global_hotkey() code so global hotkeys
		  are processed by widget.c only if the individual widget doesn't want
		  them. This means that tab and arrow keys in the terminal widget
		  will be passed on to the terminal rather than just focus another	
		  widget.

		* gcore/timer.c: Added an inactivity timer to PicoGUI
		
		* widget/widget.c: Event dispatching functions reset inactivity timer
		
		* net/dispatch.c: Added network requests to get and set the inactivity
		  timer
		  
		* gcore/video.c, pgmain.c: Fixed memory leak of vid->display's
		  gropcontext structure
		  
		* gcore/render.c: Added PG_GROP_VIDUPDATE gropnode

		* cli_c/src/pgfx_bitmap.c: Implemented pgContextUpdate for direct
		  display rendering
		  
		* cli_c/demos/scrsaver.c: Added a simple screensaver demo
		
		* include/picogui/constants.h: Defining constants for 'driver messages'
		  that can invoke hardware-specific extras like sleep mode, backlights,
		  beeps, and such.
		  
		* gcore/video.c: Added the drivermessage() function to handle sending
		  a message to all loaded drivers
		  
		* gcore/timer.c: Added some system timeouts that send driver messages
		  when activated: cursor hide, backlight off, and sleep mode.

		* gcore/widget.c: Added support for those annoying clicking noises when
		  you click or press a key. This is controlled by a config file
		  entry.

		* include/pgserver/video.h: Added the coord_physicalize() vidlib function
		
		* input/sdlinput.c: Added code to convert coordinates from logical to
		  physical when necessary

2001-07-09    Micah Dowty <micahjd@users.sourceforge.net>

Continuing work on focusing. I'm adding a 'hotspot' interface that allows
PicoGUI to define a list of hotspot coordinates (gathered from the divtree)
generate a graph, and traverse that graph as the user moves through the
hotspots with the arrow keys.
-
I've got this hotspot stuff mostly working. Still a few known bugs:
 - Moving in, then out, of a field widget locks up PicoGUI
 - The hotspot mechanism absorbs TAB and the arrow keys even if something else
   needs them instead
 - Some widgets like scroll bars and panelbars still can't be keyboard
   activated

      * include/pgserver/hotspot.h: Defined the interface for adding,
        managing, and traversing the hotspots

		* gcore/hotspot.c: Implementing the Y-X sorting hotspot algorithm

		* gcore/div.c: Free the hotspot list when divtrees are pushed/popped
		  or when divnodes are recalculated
		  
		* widget/widget.c: Added the global_hotkey() function for handling things
		  like tab and arrow keys

		* input/sdlinput.c: Added automatic warping when the PicoGUI
		  cursor is moved.
		  
		* gcore/hotspot.c: When a hotspot is selected, the widget underneath
		  is focused if possible
		  
		* widget/field.c: Field now has a hotspot
		
		* widget/button.c: When the button is focused (which can only happen
		  by hotspots) the spacebar activates it.

		* widget/popup.c: Added the escape hotkey for exiting the popup box

		* widget/terminal.c: Added hotspot
		
		* widget/scroll.c: Added hotspot
		
		* net/dispatch.c: Fixed the pgSubUpdate() bug that makes the clock
		  not always update correctly.

		* widget/button.c: Added a TRIGGER_DEACTIVATE handler to the button
		  widget so menu buttons don't get stuck down when the layer changes

2001-07-08    Micah Dowty <micahjd@users.sourceforge.net>

I'm having a Birthday LAN party on Friday the 13th, so I need to get as much
done for Smartdata as possible.
I'm starting with what Pascal calls the 'meta-input driver'. Pascal's on
vacation, but I've asked Philippe for some clarification on it. I can go
ahead and start with some of the parts I understand.
Starting with focusing.
-
I experimented with different algorithms to determine, given a starting
widget and a direction, which widget the cursor should end up at. I decided
on a simple Y-X sorting algorithm. Divnodes that should be selectable with
the keyboard should have a 'hotspot' flag set. When the screen is updated
and recalcs have taken place, these hotspots will stored and sorted, then
used for cursor movement.

      * include/pgserver/divtree.h: Added DIVNODE_HOTSPOT


2001-07-06    Micah Dowty <micahjd@users.sourceforge.net>

Finishing up the theme indexer.

 		* apps/themeindex/themeindex.pl: Writing the actual index code, using
		  the screenshots generated by pgserver's scrshot driver

2001-07-05    Micah Dowty <micahjd@users.sourceforge.net>

I'm taking a small break from SMARTDATA's todo list to take care of a couple
other loose ends.
First one is a web-based PicoGUI theme index. For this, I'm writing a small
utility to build the index, and a video driver (scrshot) to automate
screenshots under PicoGUI.

		* video/scrshot.c: Added a screenshot driver, mostly based on nullfb.c
		  but with PPM writing code in update()
		  
		* cli_perl/PicoGUI/PicoGUI.pm: Adding pgThemeLookup()
		  
		* apps/themeindex/*: Starting a simple theme indexer


2001-07-04    Micah Dowty <micahjd@users.sourceforge.net>

Happy July 4th!
"Celebrate your nation's independance by blowing up a small part of it"
   -- Apu, The Simpsons

	   * gcore/configfile.c: Fixed a stupid bug with wierd results
		  (I forgot to return g_malloc()'s error code to 'e')
		  
		* pgmain.c: Loading themes from the "themes" config option
		  Finished command line processing

2001-07-03    Micah Dowty <micahjd@users.sourceforge.net>

PicoGUI has working internationalization now!
The command line option '-e' can load a simple text file with
internationalized messages.
Now I'm starting on config file parsing.
-
I now have the config file utilities implemented (and hopefully debugged).
I need to fix a memory leak when using the command line to redefine an item
already defined in the config file, and in general finish the command line
handling.

		* gcore/errortext.c: Completely rewritten errortext(), added loading
		  function.
		  			
		* pgmain.c: -e command line option

		* gcore/errortext.c: Fixed segfault on comment or blank line.
		  (I think the manpage for strtol() is wrong...)

		* gcore/configfile.c: Implementing functions to parse, store, and
		  retrieve configuration options
		  
		* pgmain.c: Integrating config options with the command line processing
		
		* include/picogui/constants.h: Removing the fullscreen and doublebuffer
		  options. They will be turned into driver-specific config options.

2001-06-29    Micah Dowty <micahjd@users.sourceforge.net>

Ugh. There's a bug somewhere causing the client to use the wrong messages.
-
Aha! Two problems- the messages were a bit mixed up in appmgr/global.c. Also,
I forgot that the pointer returned from pgGetString is only valid until the
next PicoGUI call. Now netcore.c makes copies using alloca and strcpy, and
it seems to work fine.
Now that I have got the client reading its messages from the server, I can
internationalize the server :)

		* appmgr/global.c: Fixed out-of-order strings
		
		* cli_c/netcore.c: copy strings before use


2001-06-28    Micah Dowty <micahjd@users.sourceforge.net>

Continuing interationalizing server

		* gcore/defaulttext.inc: Cleaning up error messages
		
		* gcore/defaulttext.inc, include/picogui/constants.h, appmgr/global.c:
		  Added the client lib's messages to the error table, and made them
		  available in the default theme through PGTH_P_STRING_* properties.
		
		* net/dispatch.c: Implemented the new PGREQ_THLOOKUP request, for
		  performing theme lookups on the client side.

		* cli_c/include/c_client.h: Added pgThemeLookup API function
		
		* cli_c/src/netcore.c: Client now looks up its error messages

2001-06-27    Micah Dowty <micahjd@users.sourceforge.net>

After some email with Pascal, the internationalization problem has been better
defined. The clients are to fend for themselves. Messages in the server should
be combined with its error processing system, and that error table should be
loadable. The client library should get it's only relevant message, the error
dialog text, from the server the same way that "ok" and "cancel" are
retrieved.

      * gcore/errortext.c: Removing Brandon's haiku errors. (Sorry Brandon,
		  I will reincarnate them as a 'translation' of the original errors)

		* gcore/defaulttext.inc: Moved default text table to a separate file
		
		* script/lserrors.pl: Wrote a little perl script to check pgserver
		  error text consistancy

2001-06-25    Micah Dowty <micahjd@users.sourceforge.net>

Got a new plan document from Pascal. Next project (instead of localization)
is offscreen drawing. I have already implmented the necessary infrastructure
for this in the most recent video driver overhaul, but the canvas widget,
rendering engine, and PGFX code still needs to be written.
A little brainstorming on the interface between the client and the bitmap...
In normal canvas widget drawing, the gropnode is sent via pgWriteCmd to the
canvas widget. The gropnodes are stored in the canvas widget's divnode, then
executed all at once in the rendering engine. Rendering state is stored by
the rendering engine in a groprender struct.
There is no use for a persistent mode when rendering to an offscreen bitmap,
everything should be rendered immediately. But, state from nonvisual
gropnodes still needs to be stored. This could be done with a groprender
structure attached to the bitmap itself. The only problem I see with this is
that the groprender structure was designed for short-term use, so it
contains a pointer to the font descriptor rather than a handle. This could
be fixed at the expense of making text rendering slightly slower. Another
possibility could be to make a variation of the canvas widget that outputs
to a bitmap. Sort of an 'offscreen canvas'. The whole concept of an
invisible widget is a little weird though, and I don't think a canvas should
be used.
I think I'll modify the render state structure and skip the canvas widget. I
think the canvas widget is well suited to manipulating vector drawings but
doesn't really have a place in offscreen drawing.
Another variable here is how the blit from offscreen bitmap to screen will be
done. It would be easy to just use a bitmap widget. But to make this more
efficient, the bitmap should keep a list of 'dirty' areas for the bitmap
widget to blit.

      * include/pgserver/render.h: Modified groprender to use a font handle
		  rather than a font pointer

		* include/pgserver/video.h: Added a pointer for a groprender structure
		
		* vidbase/defaultvbl.c: Added code to allocate/free the groprender
		
		* include/picogui/network.c: Added the PGREQ_RENDER request, for
		  immediately rendering a gropnode to a specified bitmap.
		  
		* net/dispatch.c: Starting implementation of PGREQ_RENDER

		* vidbase/defaultvbl.c: Adding the bitmap_get_groprender() vidlib
		  function to retrieve/create the groprender context associated with
		  a bitmap
		  
		* gcore/render.c: Slight reorganization to make the code fully reusable
		  in PGREQ_RENDER
		  
		* include/picogui/constants.h: Added PG_OWN_DISPLAY constant
		
		* net/dispatch.c: Added code for registering and unregistering
		  exclusive display access
		  
		* gcore/errortext.c: Error messages related to PG_OWN_DISPLAY

		* gcore/render.c: Disable normal rendering when an app has exclusive
		  display access.
		  
		* cli_c/include/client_c.h: Adding pgRender API function as a frontend
		  to PGREQ_RENDER

		* cli_c/src/api.c: Implementation of pgRender
		
		* net/request.c: Added code to release the display when the app exits
		
		* include/picogui/*.h: Synchronized header files between server and
		  client. Some of Shane's polygon code was on the client side and not
		  the server, which caused a little confusion. The correct procedure is
		  to make interface changes at the server side, then copy the includes
		  to the client as needed.
		  
		* cli_c/demos/offscreen.c: Writing a small testbed for offscreen
		  rendering.
		  
		* include/picogui/network.c: Adding the PGREQ_NEWBITMAP request to
		  create an empty bitmap
		  
		* net/dispatch.c: Implementation of PGREQ_NEWBITMAP
		
		* cli_c/src/api.c: Client-side pgCreateBitmap function
		
		* cli_c/src/pgfx_bitmap.c: Added a PGFX interface to pgRender
		
2001-06-24    Micah Dowty <micahjd@users.sourceforge.net>

Polishing up the resize code...
Tada! It appears to be working correctly now!
I'll stick all this in CVS next time I have an internet connection. (Aren't
laptops fun :)
-
Starting localization support...
I'm beginning by reading the documentation for GNU gettext. If gettext suits
PicoGUI/uClinux/Chipslice's memory constraints, it might save a lot of time.

      * widget/canvas.c: Fixed automatic canvas sizing. I realized it needs
        to calculate a preferred size in canvas_resize(), but _also_ be able
	to update that size whenever new gropnodes are added.
	
      * widget/canvas.c: Added code to automatically size text gropnodes.
      	Has a couple FIXMEs for future reference, but for the canvas' current
	capabilities it should be fine.
	
      * widget/box.c: Preferred size for box should be (0,0) so it always
      	fits tightly around what's inside.
	
      * widget/label.c: Extra margin added on labels are not needed, the font
        already includes enough.
	
      * cli_c/demos/fieldtest.c: Fieldtest should be using PG_S_ALL for the
        field.

      * widget/field.c: Better field sizing

		* cli_c/demos/vidpopup.c: Modified to use automatic popup sizing

2001-06-23    Micah Dowty <micahjd@users.sourceforge.net>

Dialog box sizing works great, but buttons and panels are still a bit broke.
I also noticed some handles randomly disappearing, but I'm not sure if that is
related to the broken-ness of panelbars right now...
Needs fixink.
-
Buttons are working great now, and getting the bugs out of div.c definitely
helped. Still need to fix canvas sizing (looks like the size is being
calculated before the gropnodes are added to the list?) and fix field and
indicator sizing. Both of those two widgets are a little off.

      * widget/button.c: Fixed (?) button margins so they don't look squished
      	on the edges.

      * gcore/div.c: Tracked down a bug in the handling of
        DIVNODE_SIZE_RECURSIVE. Whether this flag is present or not, the child
	sizes need to be recursively calculated. Only if this flag is set, the
	sizes of the two children are combined to form the divnode's child
	preferred size. This gives child nodes a chance to size themselves even
	if the parent has a fixed size.
	
      * widget/button.c: Really fixed resizing margins... This time it seems
      	to look good in all test cases I tried. If the width/height stays
	under the minimum set by the theme, the minimum is used. Otherwise,
	the actual width/height plus a margin value is used. For normal
	buttons, the width is larger than the default so it gets the extra
	margin, and height remains at the default. This is more
	orientation-neutral though, so things like large bitmap buttons
	are more likely to look correct.
	
      * cli_c/src/menutest.c: Added a line-drawing to the test dialog box
        to test canvas_resize(). Doesn't seem to be working...

2001-06-22    Micah Dowty <micahjd@users.sourceforge.net>

Continuing widget resizing. All widgets can calculate a preferred size now,
so I've just got to put together the glue that calculates sizes recursively
and sets split parameters.
-
Now I have the widget resizing basically working. Needs some testing &
optimization, but when you open a panel app, the panel will now
automatically size. Same goes for things like toolbars. Still has some rough
edges... text fields and sizemodes are not handled correctly yet.
Main obstacle still is to get popup boxes to automatically size. As they are
coded now, a popup box uses DIVNODE_SPLIT_IGNORE and the size/position can
only be set in create_popup(). As it is, create_popup() has to be given
absolute width and height. I don't see any reason to let the app specify
absolute position at all, though there may be special cases like touchscreen
calibration. The app needs to be able to set absolute X,Y position, or
construct the popup centered on the screen or at the mouse cursor. The width
and height should be determined by the popup box's children preferred size,
but this could be overrided by the app. It's PicoGUI convention to use 0
(aka PGDEFAULT) for don't care / default situations, so zero size will set
it automatically. The X,Y coordinate handling is fine as is.
Right now the size is calculated immediately after the popup is created.
These parameters instead need to be stored, and the actual sizing deferred
until the popup is rendered. This way it's size can be fixed after the app
has populated it with widgets. This should make a nice shrink-wrapped dialog
box in 99% of the cases, and manual override is for that other 1%.

      * profile.defaults: Now that I have a PowerPC development machine
        (a sparkly new iBook with 5 hours of battery life and a great LCD)
	I realize that ASM_INTEL should _not_ be the default :)
	
      * include/pgserver/divtree.h: Adding functions to work with the new
        sizing parameters in divnodes
	
      * gcore/div.c: Implementations for divresize_split() and
        divresize_recursive()
	
      * widget/widget.c: Implementing widget-level resize functions like
        resizewidget() and resizeall()
	
      * widget/widget.c: Implementing CTRL-ALT-D divnode dump

      * widget/popup.c: Re-implementing popup sizing as a layout engine flag,
        so it is done when first rendering the popup. create_popup() stores
	the coordinates verbatim in the divnode, and sets the
	DIVNODE_SPLIT_POPUP and DIVNODE_SPLIT_IGNORE flags. The layout engine 
	calculates the size, stores it in the divnode, then
	removes the DIVNODE_SIZE_POPUP flag.

      * net/dispatch.c: Modified menu and dialog message popup boxes to use
      	automatic sizing
	
      * cli_c/src/api.c: Keeping the pgNewPopup and pgNewPopupAt APIs, which
        can now accept 0 (aka PGDEFAULT) as width and/or height, but also
	adding pgDialogBox which makes a centered, automatically-sized popup
	using the specified text as a title. It's just a few lines of code,
	but without this I fear people will make dialog boxes without using
	the correct theme style for the title widget.
	
      * cli_c/demos/menutest.c: Adding new demos to menutest. Buttons and
        fields need some tweaking, but in general this is working 
	really well. Neat!
	
      * widget/panel.c: Automatic sizing just interferes with panels,
      	so turn it off
	
2001-06-12    Micah Dowty <micahjd@users.sourceforge.net>

Continuing work on widget resizing

      * include/pgserver/widget.h: Modifying widget table to include resize
        functions. When size is calculated recursively, the container's
	preferred size is taken as it's minimum size.

      * widget/*.c: Replacing old resize code with the new
        <widgetname>_resize() functions.

2001-06-8    Micah Dowty <micahjd@users.sourceforge.net>

Starting to add "Smart widget resizing." Basically this means that the
widgets will be able to give the layout engine a preferred size, and the
size for containers can be calculated recursively.

      * include/pgserver/divtree.h: Added some new divnode flags, added the
        preferred width (pw,ph) to the divnode definition.     

      * gcore/div.c: Initialized divnode flags so that by default the
        preferred size is calculated recursively, and the split parameter is
        calculated automatically when applicable.

      * include/pgserver/widget.h: Removed the old resize function, added
        one in the widgetdef structure that tells the widget to calculate all
	applicable preferred size parameters. Removed the 'sizelock'
	parameter. Instead, the widget should turn off the
	DIVNODE_SIZE_AUTOSPLIT flag.

2001-06-6    Micah Dowty <micahjd@users.sourceforge.net>

<Early morning...>
Ugh. Trying to evaluate the performance of linear1 slabs and blits on the
uCsimm using benchmarking, only to find out that the gradient video test
screen crashes the simm. No debugger to be had on this thing, but with
printf()'s I narrowed it down to a divide-by-zero. In the gradient function,
both the sine and cosine values were zero. This shouldn't happen... Turns
out that the trigtab[] has been clobbered! About the second half of it or so
has been zeroed out. It appears ok in the binary, so it's probably not a
linker problem. This could be a pain to debug... Good night.
<Later that day...>
Well, after using a macro to test trigtab all throughout initialization, i
find that it _begins_ with only half the table! I think I'll just have to
chalk this one up to compiler/linker error... I can use the same workaround
I used for some of the function tables, just populate them at runtime.

After further analysis, it appears that a bunch of memory is getting
clobbered before main() even starts. This is almost definitely a bug in the
compiler, and I posted a mail to the list with details.

2001-06-5    Micah Dowty <micahjd@users.sourceforge.net>

Now that linear1 has good, fast primitives, it should be a breeze to modify
them for linear2 and linear4.

      * debug/videotest.c: Added some bars to the slab test screen
      
      * vidbase/defaultvbl.c: Fixed pallete conversion error that affected
        linear2 dramatically

      * vidbase/linear2.c: Adding line,slab,bar, and blit based on linear1
        code

      * vidbase/linear4.c: Replaced the broken blitter with a modified
        version of the blitter I wrote for linear1. Also added the slab with
	PG_LGOP_STIPPLE support.
	
      * vidbase/linear1.c: Added blitter support for PG_LGOP_INVERT_AND and
        PG_LGOP_INVERT for fast charblits

      * vidbase/linear1.c: Wrote a charblit that doesn't handle rotation or
        clipping, but for 'normal' characters simply converts the arguments
	and calls blit(). Fast!
	
      * debug/videotest.c: Added a video test mode for text
      
      * video/nullfb.c: For easier benchmarking and profiling, added a video
        driver that utilizes linear* but does nothing with the generated
        frames
	
      * video/linear1.c: Started to implement 32-bits-at-a-time copying in
        blit (and eventually slab) but byte order issues reduce portability
	to about zero. I'll wait to do this in the ASM optimization.

2001-05-31    Micah Dowty <micahjd@users.sourceforge.net>

It's taken a while longer than I expected, but I wrote a fast blitter for
linear1! I think I'll get some sleep now...

      * vidbase/linear1.c: Fast blitter full of bit-banging fun!
      
      * video/sdlfb.c: Because the blitter can read (but not modify) one byte
        past the end of the bitmap, fudged the malloc a bit to keep
	electric fence from complaining :)

      * formats/pnm.c: Inverted the horizontal loop (slight optimization) and
        added a very simple alternate loop for black&white pbm files that
	should make pbm loading in 1bpp mode much faster.

      * theme/memtheme.c, all widgets: Added a 'force' flag to div_setstate
        so I can once and for all fix the little quirks that have shown up
	due to the div_setstate optimization. Works nicely.

2001-05-29    Micah Dowty <micahjd@users.sourceforge.net>

I'm starting the extreme video driver fixink today. Basically this means
writing good primitives for linear1, 2, and 4. This will start with
PG_LGOP_NONE but will move on to encompass all LGOPs. This will result in
a relatively large volume of code that will make PicoGUI faster but somewhat 
larger, so there will be compile-time options.

linear4 already has a blit and charblit function, but they are buggy and
hence they have been disabled.
I'm starting with linear1 according to Pascal's priority list.

      * vidbase/linear1.c: Linear1 already has a slab() and bar(), both are
        pretty fast. Adding a faster line() based on the raster-optimized
	bresenham's from linear8
	
      * debug/videotest.c: Fixed stupid bug that reportes 1.6 billion frames
        per second for test #1. (didn't initialize frames counter)
	
      * pgmain.c: Small fix so pgserver exits after benchmark mode
      
      * debug/videotest.c: Added the stipple rectangle video test mode (#5)

      * vidbase/linear1.c: Wrote an accelerated slab() for PG_LGOP_STIPPLE,
        which in turn makes stippled rectangles much faster. According to some
	benchmarks on Yoshi, this increased the speed by about 3200%!

2001-05-14    Micah Dowty <micahjd@users.sourceforge.net>

Starting to do documentation... Read most of the doxygen manual, seems like
a good system. Configuring doxygen and starting to add documentation comments
to cli_c.

      * cli_c/Doxyfile: Added a Doxyfile!      

2001-05-12    Micah Dowty <micahjd@users.sourceforge.net>

Wrote a video driver for my LCD wallclock, serial40x4

      * video/serial40x4.c: New video driver, based on the ncurses driver

      * gcore/handle.c: Trying to nail down a handle bug that has been
        crashing my clock program. I think it's the same one I've been
	bothered by for a long time. Found one piece of the bug in newhandle()

2001-05-03    Micah Dowty <micahjd@users.sourceforge.net>

Fixink a couple bugs, continuing from yesterday.
Happy Friday!!!

      * widget/canvas.c: Fixed a subtle bug that caused much groplist
        mangling when using transient nodes.
	
      * gcore/render.c: Added PG_GROPF_UNIVERSAL to always render a node.
        Good for setting transformations, etc.

2001-05-03    Micah Dowty <micahjd@users.sourceforge.net>

I think I'll get this keyboard working, then write some docs. The server
seems to be holding up fine with the new gropnode engine.

      * client_c.h, src/api.c: Added the pgEvalRequest call to the client
      
      * client_c.h, src/api.c: Added the pgFromTempMemory call

2001-05-01    Micah Dowty <micahjd@users.sourceforge.net>

Fixing server bugs. Noticed a couple issues with the 'make install' in
cli_c, but I don't currently know enough about automake to fix it myself:
  - Headers in picogui/*.h aren't installed correctly
  - It doesn't run ldconfig after installing libraries?
Things to double-check in pgserver's build system:
  - Is make menuconfig broke?
  - Some way to prevent accidentally committing a modified config.defaults?

      * widget/canvas.c: Fixed color conversion when making SETCOLOR gropnodes

      * vidbase/linear8.c: Fixed crash bug in line implementation due to 
        16-bit y1 and y2 vars.
	
      * vidbase/linear4.c: Fixed the same problem
      
      * gcore/render.c: Fixed the memory leak (used wrong flag when freeing)
      	This appears to have fixed the black-rectangle bug (disappearing
	setcolor grops) also.
      
      * widget/terminal.c: Fixed up the terminal widget, though it's likely
        that it's rendering will need to be vastly improved soon.

      * gcore/render.c, widget/canvas.c: Added PG_GROPF_COLORED flag to have
        the 'oldskool' method of defining the color with each gropnode.

      * apps/blackout.c: Modifications to support new rendering. Moved
        commands to a menu, started adding support for revealing a solution

      * gcore/render.c: Added support for the first mapping type, PG_MAP_SCALE
		
      * cli_c/demos/pgfx_canvas_persistent.c: Added demonstration
      	of PG_MAP_SCALE

2001-04-30    Micah Dowty <micahjd@users.sourceforge.net>

Just because I'm sick of working on this code outside of CVS and I really
need some motivation to fix it up lately, I committed the video stuff to CVS
yesterday. Still many outstanding issues, as documented in email.
First order of business is the rotation, then fixing the memory cruft in
render.c. Might also want to think about recompatibilizing the other apps. I
should probably write the mapping code and make the virtual keyboard, and
integrate it into a new complete-with-shell Helio ROM.

      * vidwrap/rotate90.c: Really dumb bug in calculating the new angle,
        made rotated charblits segfault. 90 degree rotation works now.
	Thank you ddd! (really nifty debugger)

      * vidwrap/rotate180.c: Starting 180 degree rotation wrapper. Also
        added build system and video core miscellany to enable this
	
      * pgmain.c: Incorporated a small patch into pgmain.c that got lost
        when pgmain moved. This fixes fonts in the video test mode and
	benchmark mode

      * appmgr/global.c: Fixed a quirk in cursor loading that would munge the
        sprite flags, resulting in some extraneous blits that caused a black
	rectangle in the upper-left corner

      * vidwrap/rotate180.c: Finished the core 180 degree rotation code,
        should just be charblit mods to do...

2001-04-24    Micah Dowty <micahjd@users.sourceforge.net>

Almost finished with video reorganization junk. Too many changes to
think about now, it would be 'mind blowing'. Server seems good,
fixed up themes. (Most themes decreased in size due to the changes)
Fixing up apps to use the new structure.
This is the preparatory work for adding cool server-side mappings
and things.
Ugh. Scrolling and terminal widget are still broke in server.

2001-04-20    Micah Dowty <micahjd@users.sourceforge.net>

Starting to modify the video drivers themselves to use the new format.

      * video/svgagl.c: The vgagl driver has gotten way out of sync with the
        rest, so I'm (temporarily?) retiring it to cut down on maintenance.

2001-04-19    Micah Dowty <micahjd@users.sourceforge.net>

Finished redoing the header files, rendering engine, and defaultvbl. Too
many changes to list here, just assume that that I had to change every file :)

2001-04-18    Micah Dowty <micahjd@users.sourceforge.net>

Ah. I got the Helio stuff released on the PicoGUI web site last night. Time
to start refixing the video stuff. Goals for this mini-overhaul are:
 - Decrease the size of the gropnode by storing persistant state of the
   rendering engine between gropnodes
 - Flexible clipping
 - LGOPs work for any primitive
 - Rendering to screen or device-dependent bitmaps
 - Gropnode coordinate transformations
 
      * include/picogui/constants.h: Reworked gropnode format and lgops

      * include/pgserver/divtree.h: gropnode stuff removed
      
      * include/pgserver/render.h: gropnode stuff put here
      
      * gcore/grop.c: rendering engine removed, now only contains memory
        management sorts of code
	
      * gcore/render.c: Adding new rendering engine code here. The grop_render
        function was getting horribly long and unmanageable, weighing in
	at over 500 lines. Added a new structure for storing rendering state,
	splitting up rendering into more discrete functions. Also separating
	screen-dependant code out so another function can be added to render
	into bitmaps.

2001-04-17    Micah Dowty <micahjd@users.sourceforge.net>

After reading the mips version of stdarg.h, it all made sense. Now i can fix
some non-fatal bugs, put up a how-to web page for the helio port, and start
the next video overhaul. (to add some important new engine features and
uncruftify a bit)

      * cli_c/src/api.c: Modified calls to va_arg to use the correct types.
        As noted in stdarg.h's source, va_arg(...,short) isn't valid in mips
	
      * widget/panel.c: The panel dropped sprites on the floor, had to pick
        them up. Fixed the condition in which a second mouse press without
	a release causes a memory leak and potential segfault. (sprite
	referencing invalid bitmap)
	
      * input/r3912ts.c: Added smarter handling of up/down triggers and
        out-of-bounds conditions.

      * vidwrap/rotate90.c: Wouldn't compile when XBM was disabled, fixed
        the #ifdefs

      * Helio.config: Added a copy of the .config I used with the Helio
      

2001-04-16    Micah Dowty <micahjd@users.sourceforge.net>

Considering there are now two major things I need to add to the video
drivers, global support for lgops and rendering to any bitmap, I should
probably do that before writing any more optimized primitives.
I wanted to take a little break first to fix up the lcdmono theme some.
The Helio port is nice, especially with working power management, but the
annoying problem of blank buttons and nonfunctional app still looms over the
whole thing. Many debug statements later I traced the problem to
pgSetWidget.

      * themetools/examples/data/mono*.pbm: Added 9x9 mono icons
      
      * themetools/examples/lcdmono.ths: Many improvements for
        better look in general and better look on 1bpp devices

2001-04-15    Micah Dowty <micahjd@users.sourceforge.net>

Started porting PicoGUI to the VTech Helio, which mostly involved hacking at
various kernels.

      * input/r3912ts.c: New touchscreen driver for the Linux-VR kernel

2001-04-14    Micah Dowty <micahjd@users.sourceforge.net>

Argh, I'm getting lazy with the website/log updates

      * vidbase/defaultvbl.c: Fixed 90 degree rotation crash bug
      
      * input/ncursesinput.c: Added a hack to prevent screen clearing by
        ncurses when a key is pressed
	
      * Makefile: Adding support for linux on mips CPUs for the Helio port
      
      * config.in: Adding config options for linux on mips

2001-04-13    Micah Dowty <micahjd@users.sourceforge.net>

Ha. Just noticed that today's a Friday the 13th. Neat...
Anyway, I'm anxious to get PicoGUI running on the Helio, but I need to
finish my top-priority-todo-items first.

      * cli_c/src/pgfx_canvas.c: Adding primitive implementations for the
        PGFX_PERSISTENT mode
	
      * cli_c/demos/pgfx_canvas_persistent.c: Small snippet to illustrate
        persistent mode with the canvas

      * gcore/grop.c: Adding 'transient' gropnodes for immediate-mode
        grop rendering. Adding a 'zombie list' to cache allocated gropnodes.
	This should make both immediate mode and normal gropnode rendering
	faster by eliminating almost all memory allocs
	
      * widget/widget.c: Added zombie grop stats to the memory debug
        guru screen
	
      * cli_c/src/pgfx_canvas.c: Adding support for the PGFX_IMMEDIATE
        mode using the new PG_GROPF_TRANSIENT flag
	
      * cli_c/demos/pgfx_canvas_immediate.c: Snippet to illustrate animation
        using immediate mode

      * widget/canvas.c: Fixed bad use of grop_ctxt that assumed the groplist
        wouldn't change structure while rendering
	
      * include/pgserver/divtree.h: Added a flag to divnode that specifies
        whether the groplist has been rearranged by transient node deletion
	
      * config.in: Added an option to specify maximum number of zombie grops

2001-04-12    Micah Dowty <micahjd@users.sourceforge.net>

Starting the abstract graphics interface in the client.
Got my Helio in today! It's a pretty nifty piece of hardware. I tried the
pocketlinux and vhl-tools linux distros on it. Pocketlinux is quite sluggish
even on that 75mhz CPU, but otherwise is pretty neat. vhl-tools starts up a
neat "W" interface, and can access all hardware fine except the power
management, hardware buttons, and audio. I'll have to try some of the latest
Linux VR code on it to see if that's been fixed.

      * include/picogui/pgfx.h: Defined the abstract graphics interface, pgfx
      
      * cli_c/src/pgfx.c: General utilities
      
      * cli_c/src/pgfx_canvas.c: Started PGFX lib for canvas drawing

2001-04-11    Micah Dowty <micahjd@users.sourceforge.net>

Today I wrote the new Perl client library.
I did end up ordering a VTech Helio yesterday, so I should have a portable
platform that will run Linux well soon.

2001-04-10    Micah Dowty <micahjd@users.sourceforge.net>

Well, now I've killed the bugs that were bothering people and at least know
(hopefully) where the others are, I'm going to go back to finishing the video
code. Some of the other things I need to do soon are write a loader for BMP
images, and start the nifty text layout engine.
I'd also like to get this running on some actual handheld hardware. I was
thinking of the Agenda VR3, but the company seems to be on the way down due
to bad management, and the hardware has crummy battery life. The VTech Helio
seems like a good piece of hardware, has good Linux support, and doesn't
even run WinCE! I've still got that Philips Nino to try a WinCE port on, but
I'm really not looking forward to that.

      * vidbase/defaultvbl.c: Fixed a bug in tiled blit()s that made the
        background shift in weird ways
	
      * gcore/pgmain.c: Fixed crash bug when theme and video were specified
        on the command line: reload_initial_themes would be called
	before initialization was completed
	
      * vidbase/linear8.c: Unbroke the tileblit, so aqua (and other bitmapped
        themes) no longer crash it

      * vidbase/defaultvbl.c: Fixed up the default color conversions

      * vidbase/linear(16|8|4|2|1).c: Removed custom color conversions.
        The one in defaultvbl works fine, and is not significantly slower
	
      * debug/videotest.c: To quantitatively measure video driver performance,
        added a benchmarking system (-m command line option)

2001-04-09    Micah Dowty <micahjd@users.sourceforge.net>

Compared the handle tree dumps, and the handle tree stays the same throughout!
So, maybe it's not a nasty handle bug, but something else... Noticed that
after the first theme load/unload cycle a few extra grops are present, but
between cycles 8 and 9 no memory changes.

Ha! Found some quite weird results in the gropnode dumps, and traced it to
some bad handles in position_button. Found a bug in the code to allow themes
to customize button bitmaps and text. Fixed this, (and some related bugs
in button_set) and that fixed the gropnode problems, AND made the theme
load/unload cycle bug go away!

      * widget/widget.c: Added CTRL-ALT-N gropNode dump

      * widget/button.c: Added sanity checking to position_button

      * widget/button.c: Found _a_ bug... Fixed theme-controlled button
        properties so they are correctly unloaded. This caused at least a few
	extra-weird gropnodes and rdhandle failures.

      * apps/gremlin/gremlin.c: Added a new debugging app, an automated tester
        program a la "Gremlins" for PalmOS.

      * widget/terminal.c: Gremlins found a memory leak in the terminal
        widget, twas easy to fix

2001-04-08    Micah Dowty <micahjd@users.sourceforge.net>

I think the only way to figure out what's really happening is to add a debug
key to do a full dump of the handle tree. Hey, it couldn't be _that_ big,
could it?  ;-)

      * widget/widget.c: Adding CTRL-ALT-H hotkey
      
      * gcore/handle.c: Added handle_dump call

      * config.help: Added documentation for CTRL-ALT-H

2001-04-07    Micah Dowty <micahjd@users.sourceforge.net>

Fixing some bugs. The fraction sizing + themes bug reported by philippe is
caused by the widgets' resize functions assuming the 'split' value is in
pixels. What this actually boils down to is, when the size or sizemode values
are set, the widget needs to leave the widget's sizing alone.

      * include/pgserver/widget.h: Added the 'sizelock' variable to
        the widget structure, to prevent automatic resizing when the
	app sizes manually.
	
      * widget/widget.c,gcore/handle.c: Moved resizeall() to widget.c since
        it no longer depends on direct handle tree access

      * widget/widget.c: Turns sizelock on when size or sizemode are changed
      
      * Added support for sizelock to all resize functions where applicable
      
      * widget/button.c: "Fixed" position_button() ignoring rdhandle errors,
        which causes a crash on theme unload
	
      * gcore/handle.c: Fixed an error-handling goofup in rdhandle that
        would cause a crash on any rdhandle failure... sometimes. Gotta
	love pointers!
	
      * gcore/handle.c: I think I've tracked this mess down to another
        handle system bug. I added more handle debugging. Turn on
	DEBUG_MEMORY, and grep output for 'handle'
      
      
2001-04-05    Micah Dowty <micahjd@users.sourceforge.net>

Adding the support necessary for the server to remember loaded themes so it
can reload them when the driver changes.

      * gcore/pgmain.c: Made the theme list a little more efficient, and
        postponed deleting it until cleanup. Added reload_initial_themes()
	to use this list to reload themes into memory
	
      * include/pgserver/pgmain.c: Added the reload_initial_themes() function
        prototype
	
      * gcore/video.c: Added call to reload_initial_themes() when setting
        the video mode

2001-04-04    Micah Dowty <micahjd@users.sourceforge.net>

In working on video mode code, found an old bug bothering me: closing a
popup box that isn't on top instead deletes the top popup box's divtree and
leaves a blank divtree that freezes the screen. This bug is demonstrated
when, in omnibar, the vidpopup app starts before it closes the application
menu.

Got the mode conversion working! Because PicoGUI only stores bitmaps in the
device-dependant format, detail is permanently lost when converting to a
lower bpp. For this reason, themes and possibly app bitmaps should be reloaded
when switching to a higher bpp. There will be a new event to request
reloading from the client, and the server will automatically be able to
reload (from file) all themes passed on the command line.

      * vidwrap/rotate90.c: Removed the 'iterate for all bitmaps' code
        to place it in its own function
	
      * gcore/video.c: Added a utility function, bitmap_iterate, that calls
        a callback function for all loaded bitmaps, added calls to modeconvert
	and modeunconvert in setmode.
	
      * widget/widget.c: Renaming reset_pointer() to reset_widget_pointers()
        so it can stop confusing me
	
      * gcore/div.c: dts_pop() now makes you specify which divtree to delete
      
      * widget/popup.c: Changed for new dts_pop() syntax (currently this is
        the only place dts_push() and dts_pop() are used)
	
      * gcore/g_error.c: Added code to guru() so it mirrors its messages
        on stderr

      * config.in: Added compile-time option to control stderr GURU output

      * gcore/defaultvbl.c: Added the actual depth-conversion loops in
        modeconvert and modeunconvert. Now the runtime depth switching works!

      * cli_c/demos/omnibar.c: Fixed a divide-by-zero SIGFPE that I noticed.
        It's interesting how testing PicoGUI on computers of all different
	speeds helps catch the weird race conditions :)
	
      * widget/canvas.c: Fixed a bug in colorconv as pointed out by Oliver
        that prevented colored text from converting properly

      * widget/flatbutton.c: Added all 7 lines of code it takes to make a
        customized button
	
      * include/picogui/constants.h: Added new theme objects and widget type
        for flatbutton
      
      * widget/widget.c: Added widget table entry for flatbutton
      
      * include/pgserver/widget.h: Added widget prototype for flatbutton
      
      * theme/memtheme.c: Added theme inheritance entries for the
        flatbutton's new theme objects

      * Makefile: Added widget/flatbutton.c to project

      * cli_c/include/picogui/constants.h: Synchronized to server
      
      * cli_c/demos/demo.c: Added a flatbutton widget

      * theme/memtheme.c: Revised flatbutton inheritance defaults so the
        defaults will work most of the time

2001-04-03    Micah Dowty <micahjd@users.sourceforge.net>

Got linux booting on the Nino ok, but the framebuffer doesn't work.

2001-04-02    Micah Dowty <micahjd@users.sourceforge.net>

I didn't get much done over spring break, but maybe I'll get a lot done today!
(Hahahaha!) Oh well...
Nifty!! A friend of the network admin here at our school had an extra
"Palm-Size" PC, a Philips Nino 300-series with 8MB memory. You know what
they say about giving geeks hardware! Expect a PicoGUI port to this soon. It
runs WinCE (which I discovered is awfully confusing on a palm computer) so
maybe a PicoGUI port to WinCE is in order first, but it it reported to run
Linux too!
      
      * include/pgserver/video.h: Adding new video functions to convert
        between depths at runtime. Similar to entermode and exitmode, the
	function bitmap_modeconvert and bitmap_modeunconvert convert a bitmap
	between a linear array of 32-bit pgcolors and a color-depth-specific
	format used by the driver.

2001-03-30    Micah Dowty <micahjd@users.sourceforge.net>

Still don't have bit depth changing working correctly, but there are a lot
of little things I had to fix here and there...
Happy Friday!

      * widget/popup_nobar.c: Resurrected the no-panelbar support from some
        backups when I realized it wasn't in CVS

      * widget/field.c: Fixed bug in cursor positioning when PG_WP_TEXT is set

<<<<<<< micah-log.txt
      * widget/widget.c: For better mode switch and memory utilization info,
        adding CTRL-ALT-P (for pictures?) to show all loaded bitmaps

=======
      * widget/widget.c: Added a new debugging key, CTRL-ALT-P, to display
        all loaded bitmaps

>>>>>>> 1.41
2001-03-29    Micah Dowty <micahjd@users.sourceforge.net>

Ugh. Spent the last 3 days installing a network for some jerk who doesn't
deserve it. On top of that, a debian upgrade messed up xlib and aalib so I
couldn't compile PicoGUI for a few hours today. Anyway...
In preparation for a video mode setting app I'm adding a checkbox widget.
There is now a new EXEV flag, PG_EXEV_TOGGLE, that makes a button
'push-on-push-off' the checkbox widget turns this flag on and uses a
separate theme object to create a checkbox's look and workings.

      * widget/checkbox.c: A little code to customize a button, just like in
        menuitem.c
	
      * widget/button.c: Added a new EXEV flag so a click toggles the button
        state, for push-on-push-off buttons
	
      * widget/widget.c, Makefile, include/picogui/constants.h,
        include/pgserver/widget.h: Added checkbox widget

      * theme/thobjtab.c: Added theme inheritance entries for the checkbox's
        theme objects.
	
      * demos/demo.c: Added examples of a toggle button and checkbox

      * widget/button.c: Added an experimental PG_WP_ON property to get/set
        the toggle state of a button/checkbox/radiobutton/etc

      * examples/pseudo3d.ths: Added good checkbox support- put together a
        small code fragment to make a bitmapped checkbox that is reused in
	a few other themes.
 
      * examples/aqua.ths: Added good checkbox support
      
      * examples/classic256.ths: Added minimal checkbox support
      
      * examples/flat16.ths: Added neat checkbox support
      
      * examples/nifty3d.ths: Added good checkbox support

      * examples/pastel_light.ths: Added good checkbox support

      * widget/button.c: Fixed small bug in sizing vertical buttons, it wasn't
        accounting for the small space between them.
	
      * demos/vidpopup.c: Started work on a small video mode selector popup
        menu. This will (someday??) be integrated into pgl, the PicoGUI
	Launcher yet-to-be-written

      * net/requests.inc,include/picogui/network.h,net/dispatch.c: Added a new
        request, getmode, that returns a pgmodeinfo structure with details on
	the current video mode
	
      * cli_c/include/picogui/client_c.h: Added pgGetVideoMode prototype
      
      * cli_c/src/api.c: Added pgGetVideoMode implementation

      * cli_c/src/netcore.c: Added some measure of SIGSEGV and SIGFPE handling
        via PicoGUI's error handler mechanism
	
      * widget/field.c: Added PG_WP_TEXT set capability, fields are now
        read/write
      
2001-03-25    Micah Dowty <micahjd@users.sourceforge.net>

Well, I'm on spring break now! So, aside from the multiplayer gaming, I have
plenty of time to code :)

      * vidbase/defaultvbl.c: Fixed charblit_u clipping
      
      * Removed some obsolete themes

      * video/sdlfb.c: Added SDL_RESIZABLE flag

      * video/sdlinput.c: Added call to video_setmode() on window resize

2001-03-23    Micah Dowty <micahjd@users.sourceforge.net>

Cleaning up a few remaining issues... After that, I'm planning on
implementing the necessary bitmap conversions to make depth switching work
right. With all these things that can now be changed at runtime it would be
nice to make some sort of menu to do it from. Ah, that's what pgl was going
to be for :)

      * config.defaults: Updated defaults, including rotation on by default
            
      * gcore/pgmain.c: Added -r command line option to rotate by default
      
      * vidwrap/rotate90.c: Now checks whether cursor is allocated before
        rotating it, this prevents segfault with -r flag.

      * include/pgserver/handle.h: Changed return type of handle_iterate to
        g_error from void
	
      * gcore/handle.c: Made changes necessary for handle_iterate to return
        errors from iterator functions.

      * vidwrap_rotate90.c: Added error checking to rotate90_entermode

      * include/pgserver/video.h: Made charblit_u conditionally compile;
        only needed when CONFIG_ROTATE is on
	
      * vidwrap/rotate90.c: Rotated charblit_v now uses charblit_u
	
      * vidbase/defaultvbl.c: Adding a reference implementation of charblit_u

2001-03-22    Micah Dowty <micahjd@users.sourceforge.net>

Happy Friday! (my last day of school before spring break)
I'm cleaning up the aftermath of yesterday's hasty rotation coding. This
includes fixing remaining bugs, and integrating the changes into video
drivers other than sdlfb and ez328.

      * gcore/video.c: A small bug in the root divnode resizing loop prevented
        layers other than the bottom one from updating. Now the screen can be
	resized/rotated while a menu or dialog is onscreen.
	
      * widget/popup.c: Separated popup clipping code into the new
        clip_popup() function

      * include/pgserver/widget.h: Added clip_popup()
      
      * gcore/video.c: Added code to clip any onscreen popups so they don't
        redraw past the edge of the screen and segfault
	
      * include/pgserver/divtree.h: Changed the 'split' variable to a signed
        16-bit integer to avoid problems with wrap-around

      * video/ncurses.c: Removed mode parameters from it's init function
      
      * video/null.c: Removed params from init, added a dummy setmode()

      * appmgr/global.c: Fixed memory leak. Default cursor bitmaps were not
        getting freed on shutdown

      * include/pgserver/video.h: Added charblit_u function for upside-down
        text blits (rotated charblit_v)

2001-03-21    Micah Dowty <micahjd@users.sourceforge.net>

Shortly after committing the rotation code with runtime mode switching, I
found a few bugs...
      
      * vidbase/defaultvbl.c: Fixed some faulty logic in
        def_bitmap_rotate90() that broke rotation in modes less than 8bpp
	
