
2001-04-04    Micah Dowty <micahjd@users.sourceforge.net>

In working on video mode code, found an old bug bothering me: closing a
popup box that isn't on top instead deletes the top popup box's divtree and
leaves a blank divtree that freezes the screen. This bug is demonstrated
when, in omnibar, the vidpopup app starts before it closes the application
menu.

Got the mode conversion working! Because PicoGUI only stores bitmaps in the
device-dependant format, detail is permanently lost when converting to a
lower bpp. For this reason, themes and possibly app bitmaps should be reloaded
when switching to a higher bpp. There will be a new event to request
reloading from the client, and the server will automatically be able to
reload (from file) all themes passed on the command line.

      * vidwrap/rotate90.c: Removed the 'iterate for all bitmaps' code
        to place it in its own function
	
      * gcore/video.c: Added a utility function, bitmap_iterate, that calls
        a callback function for all loaded bitmaps, added calls to modeconvert
	and modeunconvert in setmode.
	
      * widget/widget.c: Renaming reset_pointer() to reset_widget_pointers()
        so it can stop confusing me
	
      * gcore/div.c: dts_pop() now makes you specify which divtree to delete
      
      * widget/popup.c: Changed for new dts_pop() syntax (currently this is
        the only place dts_push() and dts_pop() are used)
	
      * gcore/g_error.c: Added code to guru() so it mirrors its messages
        on stderr

      * config.in: Added compile-time option to control stderr GURU output

      * gcore/defaultvbl.c: Added the actual depth-conversion loops in
        modeconvert and modeunconvert. Now the runtime depth switching works!

      * cli_c/demos/omnibar.c: Fixed a divide-by-zero SIGFPE that I noticed.
        It's interesting how testing PicoGUI on computers of all different
	speeds helps catch the weird race conditions :)
	
      * widget/canvas.c: Fixed a bug in colorconv as pointed out by Oliver
        that prevented colored text from converting properly

      * widget/flatbutton.c: Added all 7 lines of code it takes to make a
        customized button
	
      * include/picogui/constants.h: Added new theme objects and widget type
        for flatbutton
      
      * widget/widget.c: Added widget table entry for flatbutton
      
      * include/pgserver/widget.h: Added widget prototype for flatbutton
      
      * theme/memtheme.c: Added theme inheritance entries for the
        flatbutton's new theme objects

      * Makefile: Added widget/flatbutton.c to project

      * cli_c/include/picogui/constants.h: Synchronized to server
      
      * cli_c/demos/demo.c: Added a flatbutton widget

      * theme/memtheme.c: Revised flatbutton inheritance defaults so the
        defaults will work most of the time

2001-04-03    Micah Dowty <micahjd@users.sourceforge.net>

Got linux booting on the Nino ok, but the framebuffer doesn't work.

2001-04-02    Micah Dowty <micahjd@users.sourceforge.net>

I didn't get much done over spring break, but maybe I'll get a lot done today!
(Hahahaha!) Oh well...
Nifty!! A friend of the network admin here at our school had an extra
"Palm-Size" PC, a Philips Nino 300-series with 8MB memory. You know what
they say about giving geeks hardware! Expect a PicoGUI port to this soon. It
runs WinCE (which I discovered is awfully confusing on a palm computer) so
maybe a PicoGUI port to WinCE is in order first, but it it reported to run
Linux too!
      
      * include/pgserver/video.h: Adding new video functions to convert
        between depths at runtime. Similar to entermode and exitmode, the
	function bitmap_modeconvert and bitmap_modeunconvert convert a bitmap
	between a linear array of 32-bit pgcolors and a color-depth-specific
	format used by the driver.

2001-03-30    Micah Dowty <micahjd@users.sourceforge.net>

Still don't have bit depth changing working correctly, but there are a lot
of little things I had to fix here and there...
Happy Friday!

      * widget/popup_nobar.c: Resurrected the no-panelbar support from some
        backups when I realized it wasn't in CVS

      * widget/field.c: Fixed bug in cursor positioning when PG_WP_TEXT is set

<<<<<<< micah-log.txt
      * widget/widget.c: For better mode switch and memory utilization info,
        adding CTRL-ALT-P (for pictures?) to show all loaded bitmaps

=======
      * widget/widget.c: Added a new debugging key, CTRL-ALT-P, to display
        all loaded bitmaps

>>>>>>> 1.41
2001-03-29    Micah Dowty <micahjd@users.sourceforge.net>

Ugh. Spent the last 3 days installing a network for some jerk who doesn't
deserve it. On top of that, a debian upgrade messed up xlib and aalib so I
couldn't compile PicoGUI for a few hours today. Anyway...
In preparation for a video mode setting app I'm adding a checkbox widget.
There is now a new EXEV flag, PG_EXEV_TOGGLE, that makes a button
'push-on-push-off' the checkbox widget turns this flag on and uses a
separate theme object to create a checkbox's look and workings.

      * widget/checkbox.c: A little code to customize a button, just like in
        menuitem.c
	
      * widget/button.c: Added a new EXEV flag so a click toggles the button
        state, for push-on-push-off buttons
	
      * widget/widget.c, Makefile, include/picogui/constants.h,
        include/pgserver/widget.h: Added checkbox widget

      * theme/thobjtab.c: Added theme inheritance entries for the checkbox's
        theme objects.
	
      * demos/demo.c: Added examples of a toggle button and checkbox

      * widget/button.c: Added an experimental PG_WP_ON property to get/set
        the toggle state of a button/checkbox/radiobutton/etc

      * examples/pseudo3d.ths: Added good checkbox support- put together a
        small code fragment to make a bitmapped checkbox that is reused in
	a few other themes.
 
      * examples/aqua.ths: Added good checkbox support
      
      * examples/classic256.ths: Added minimal checkbox support
      
      * examples/flat16.ths: Added neat checkbox support
      
      * examples/nifty3d.ths: Added good checkbox support

      * examples/pastel_light.ths: Added good checkbox support

      * widget/button.c: Fixed small bug in sizing vertical buttons, it wasn't
        accounting for the small space between them.
	
      * demos/vidpopup.c: Started work on a small video mode selector popup
        menu. This will (someday??) be integrated into pgl, the PicoGUI
	Launcher yet-to-be-written

      * net/requests.inc,include/picogui/network.h,net/dispatch.c: Added a new
        request, getmode, that returns a pgmodeinfo structure with details on
	the current video mode
	
      * cli_c/include/picogui/client_c.h: Added pgGetVideoMode prototype
      
      * cli_c/src/api.c: Added pgGetVideoMode implementation

      * cli_c/src/netcore.c: Added some measure of SIGSEGV and SIGFPE handling
        via PicoGUI's error handler mechanism
	
      * widget/field.c: Added PG_WP_TEXT set capability, fields are now
        read/write
      
2001-03-25    Micah Dowty <micahjd@users.sourceforge.net>

Well, I'm on spring break now! So, aside from the multiplayer gaming, I have
plenty of time to code :)

      * vidbase/defaultvbl.c: Fixed charblit_u clipping
      
      * Removed some obsolete themes

      * video/sdlfb.c: Added SDL_RESIZABLE flag

      * video/sdlinput.c: Added call to video_setmode() on window resize

2001-03-23    Micah Dowty <micahjd@users.sourceforge.net>

Cleaning up a few remaining issues... After that, I'm planning on
implementing the necessary bitmap conversions to make depth switching work
right. With all these things that can now be changed at runtime it would be
nice to make some sort of menu to do it from. Ah, that's what pgl was going
to be for :)

      * config.defaults: Updated defaults, including rotation on by default
            
      * gcore/pgmain.c: Added -r command line option to rotate by default
      
      * vidwrap/rotate90.c: Now checks whether cursor is allocated before
        rotating it, this prevents segfault with -r flag.

      * include/pgserver/handle.h: Changed return type of handle_iterate to
        g_error from void
	
      * gcore/handle.c: Made changes necessary for handle_iterate to return
        errors from iterator functions.

      * vidwrap_rotate90.c: Added error checking to rotate90_entermode

      * include/pgserver/video.h: Made charblit_u conditionally compile;
        only needed when CONFIG_ROTATE is on
	
      * vidwrap/rotate90.c: Rotated charblit_v now uses charblit_u
	
      * vidbase/defaultvbl.c: Adding a reference implementation of charblit_u

2001-03-22    Micah Dowty <micahjd@users.sourceforge.net>

Happy Friday! (my last day of school before spring break)
I'm cleaning up the aftermath of yesterday's hasty rotation coding. This
includes fixing remaining bugs, and integrating the changes into video
drivers other than sdlfb and ez328.

      * gcore/video.c: A small bug in the root divnode resizing loop prevented
        layers other than the bottom one from updating. Now the screen can be
	resized/rotated while a menu or dialog is onscreen.
	
      * widget/popup.c: Separated popup clipping code into the new
        clip_popup() function

      * include/pgserver/widget.h: Added clip_popup()
      
      * gcore/video.c: Added code to clip any onscreen popups so they don't
        redraw past the edge of the screen and segfault
	
      * include/pgserver/divtree.h: Changed the 'split' variable to a signed
        16-bit integer to avoid problems with wrap-around

      * video/ncurses.c: Removed mode parameters from it's init function
      
      * video/null.c: Removed params from init, added a dummy setmode()

      * appmgr/global.c: Fixed memory leak. Default cursor bitmaps were not
        getting freed on shutdown

      * include/pgserver/video.h: Added charblit_u function for upside-down
        text blits (rotated charblit_v)

2001-03-21    Micah Dowty <micahjd@users.sourceforge.net>

Shortly after committing the rotation code with runtime mode switching, I
found a few bugs...
      
      * vidbase/defaultvbl.c: Fixed some faulty logic in
        def_bitmap_rotate90() that broke rotation in modes less than 8bpp
	
