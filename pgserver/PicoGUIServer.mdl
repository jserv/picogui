# -*- python -*-

import os
from Bee.Autoconf import compile, install, clean
from Bee.Logic import S

multicompile     = 1
platform_variant = 1

help = """
Provides the PicoGUI server, which is responsible for the
graphical interface.
"""

depends = [ 'kernel', 'resourcemanager', ('libjpeg', S ('platform/ppc-linux')) ]

runtime = [

            Runtime ('install', 'Install PicoGUI Server',
                     content = [ 'bin/pgserver',
                                 'etc/pgserver.conf'],
                     depends = [ 'resourcemanager/install',
                                 'kernel/video'],
                     help = "Install the PicoGUI Server" ),

            Runtime ('server', 'Run PicoGUI Server',

                     content = [ 'etc/rm.d/picoguiserver' ],
                     
                     depends = [ 'picoguiserver/install', 'resourcemanager/server',
                                 (S ('module/picoguiserver/server') & S ('platform/m68k-pic-coff')) >> S ('module/pocketapps/bioscall'),
                                 (S ('module/picoguiserver/server') & S ('platform/m68k-pic-coff')) >> S ('module/pocketapps/initenv'),
                                 ],
                     rcscript = '''
# setup env vars
rm -f /var/pgserver.dynconf

# pre-calibrate the /dev/ts device using bios env var
bioscall --ts-calibrate=PG_TS_CALIBRATION

if bioscall --test PG_REMORAKB_ON -eq 1
then
  if bioscall --test PLATFORM_NAME = "RemoraPilotRun"
  then
    echo "/etc/rc: Using Ericsson chatboard on ttyS0"
    echo "[input-ericsson-chatboard]" >>/var/pgserver.dynconf
    echo "device = /dev/ttyS0" >>/var/pgserver.dynconf
  else
    echo "/etc/rc: Using Remora keyboard on ttyS0"
    echo "[remora-kb]" >>/var/pgserver.dynconf
    echo "device = /dev/ttyS0" >>/var/pgserver.dynconf
    if bioscall --test PG_REMORAKB_BAUD_SHIFT -eq 1
    then
      echo "baud_shift = 1" >>/var/pgserver.dynconf
    fi
  fi
fi

# start pgserver
rm_task unblock picogui-server

''',
                     help = "Start the PicoGUI Server" )
            ]


def prepare (module, platform, project):
    profile = "../profiles/profile.SMARTDATA-%s" % \
              platform.fqn ()
    
    command = ("../configure --prefix=%s --with-profile=%s --with-prefix=%s --host=%s " +
               "--with-extra-ipath=%s/include:%s/include --with-extra-libs=%s/lib/librm.a " +
               "--enable-bee") % \
              (module.path ['prefix'],
               profile,
               platform.toolchain,
               platform.platform,
               project ['module/kernel'].path ['dfl'],
               project ['module/resourcemanager'].path ['dfl'],
               project ['module/resourcemanager'].path ['dfl'])

    if platform.platform == "ppc-linux" :
        command += " --with-jpeg-dir=%s" % project ['module/libjpeg'].path ['dfl']

    message ("running: %s" % command)
    sequence ("test ! -f ../autogen.sh || (cd .. ; ./autogen.sh || true)", command)
    return

def install (module, platform, project):
    sequence ("make install prefix=%s" % module.path ['frz'])

    # try to install the mdl file in the root of the frozen directory
    installfile (module.file, module.path ['r_frz'])

    # generate the RM file
    file = os.path.join (module.path ['frz'], 'etc', 'rm.d', 'picoguiserver')
    makedirs (os.path.dirname (file))

    fd = open (file, 'w')
    fd.write ('''
name = picogui-server
argv = pgserver

restart  = 1
announce = 1
blocked  = 1
    ''')
    fd.close ()
    return


