# -*- python -*-

import os, string
from Bee.Autoconf import compile, install, clean
from Bee.Logic import S

multicompile     = 1
platform_variant = 1

description = ''' PicoGUI server application '''

help = """
Provides the PicoGUI server, which is responsible for the
graphical interface.
"""

prefix = '/usr'

depends = [
    'resourcemanager', 'kernel',
    ('libjpeg', S ('platform/ppc-linux') | S ('platform/native-linux'))
    ]
    
runtime = [

            Runtime ('install', 'Install PicoGUI Server',
                     content = [ 'bin/pgserver',
                                 '../etc/pgserver.conf'],
                     depends = [ 'resourcemanager/install',
                                 'kernel/video'],
                     help = "Install the PicoGUI Server" ),

            Runtime ('start', 'Run PicoGUI Server',

                     content = [ '../etc/rm.d/picoguiserver',
                                 'bin/picogui-launcher.sh' ],
                     
                     depends = [ 'picoguiserver/install', 'resourcemanager/start',
                                 (S ('module/picoguiserver/start') & S ('platform/m68k-pic-coff')) >> S ('module/pocketapps/bioscall'),
                                 (S ('module/picoguiserver/start') & S ('platform/m68k-pic-coff')) >> S ('module/pocketapps/initenv'),
                                 ],

                     rcscript = 'picogui-launcher.sh',
                     
                     help = "Start the PicoGUI Server" )
            ]


def prepare (module, platform, project):
    profile = "../profiles/profile.SMARTDATA-%s" % \
              platform.fqn ()

    command = ["../configure",
               "--sysconfdir=/etc",
               "--prefix=%s" % module.path ['prefix'],
               "--with-profile=%s" % profile,
               "--enable-bee",
               "--with-extra-ipath=%s/include" % project ['module/kernel'].path ['dfl'],
               "--with-rm=%s" % project ['module/resourcemanager'].path ['dfl'],
               ]

    if not platform.native:
        command = command + [
            "--with-prefix=%s" % platform.toolchain,
            "--host=%s" % platform.platform,
        ]
        
    if platform.platform == "ppc-linux" or platform.platform == "native-linux":
        command += [" --with-jpeg-dir=%s" % project ['module/libjpeg'].path ['dfl']]

    message ("running: %s" % string.join (command))
    sequence ("test ! -f ../autogen.sh || (cd .. ; ./autogen.sh || true)",
              string.join (command))
    return

def install (module, platform, project):
    sequence ("make install DESTDIR=%s" % module.path ['d_frz'])

    # try to install the mdl file in the root of the frozen directory
    installfile (module.file, module.path ['r_frz'])

    # generate the RM file
    file = os.path.join (module.path ['d_frz'], 'etc', 'rm.d', 'picoguiserver')
    makedirs (os.path.dirname (file))

    fd = open (file, 'w')

    if platform.platform == 'm68k-pic-coff':
        fd.write ('''
name = picogui-server
argv = pgserver

restart  = 1
announce = 1
blocked  = 1
    ''')

    elif platform.platform == 'native-linux':
        fd.write ('''
name = picogui-server
argv = pgserver -c etc/pgserver.conf -m 320x240x16

restart  = 1
announce = 1
blocked  = 0
    ''')

    else:
        fd.write ('''
name = picogui-server
argv = pgserver

restart  = 1
announce = 1
blocked  = 0
    ''')
        
    
    fd.close ()

    file = os.path.join (module.path ['frz'], 'bin', 'picogui-launcher.sh')
    makedirs (os.path.dirname (file))

    fd = open (file, 'w')

    if platform.platform == 'm68k-pic-coff':
        fd.write ('''#!/bin/sh
    
# setup env vars
rm -f /var/pgserver.dynconf

# pre-calibrate the /dev/ts device using bios env var
bioscall --ts-calibrate=PG_TS_CALIBRATION

if bioscall --test PG_REMORAKB_ON -eq 1
then
  if bioscall --test PLATFORM_NAME = "RemoraPilotRun"
  then
    echo "/etc/rc: Using Ericsson chatboard on ttyS0"
    echo "[input-ericsson-chatboard]" >>/var/pgserver.dynconf
    echo "device = /dev/ttyS0" >>/var/pgserver.dynconf
  else
    echo "/etc/rc: Using Remora keyboard on ttyS0"
    echo "[remora-kb]" >>/var/pgserver.dynconf
    echo "device = /dev/ttyS0" >>/var/pgserver.dynconf
    if bioscall --test PG_REMORAKB_BAUD_SHIFT -eq 1
    then
      echo "baud_shift = 1" >>/var/pgserver.dynconf
    fi
  fi
fi

# start pgserver
rm_task unblock picogui-server
''')

    else:
        fd.write ('''#!/bin/sh

# automatically launched by the resource manager
''')
        
    fd.close ()
    os.chmod (file, 0755)
    
    return


