#
# Currently just a scratchpad for testing whatever happens to need it
#

import PGBuild.Config
env = Environment()

# Use the default configuration tree
conf = PGBuild.Config.default

# Mount the sources.xml from conf-dev (read-only)
# and our test.xml (read-write)
conf.mount(env.fs.Entry("../conf-dev/sources.xml"))
conf.mount(env.fs.Entry("test.xml"))
conf.commit()

# Dump our current in-memory tree to XML
open("merged.xml","w").write(conf.toprettyxml())

# Try using an XPath to get the title of our working copy
print repr(conf.xpath("/pgbuild/@title")[0].value)

# Print all versions of testpkg
print map(lambda x: x.value, conf.xpath("packages/package[@name='testpkg']/version/@name"))

# Print some sample mount info objects
print conf.xpath("packages/package[@name='conf']")[0].minfo
print conf.xpath("packages/package[@name='testpkg']")[0].minfo
print conf.xpath("packages")[0].minfo

# Get an SCons node pointing to the 'testpkg' package
pkg = conf.node("packages/package[@name = 'testpkg']")
print pkg

# Build a 'hello world'
prog = env.Program('hello', 'hello.c')
Default(prog)

# Add a dependency, so the hello world should be rebuilt
# when we change the subtree described by pkg, but not
# when we change other parts.
env.Depends(prog, pkg)
