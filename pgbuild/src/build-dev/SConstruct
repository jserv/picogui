#
# Currently just a scratchpad for testing whatever happens to need it
#

import PGBuild.Node.XML
import PGBuild.CommandLine
env = Environment()
p = PGBuild.CommandLine.Progress().task("Testing XML support")

# Create an SCons node wrapper for the XML document's DOM
testFile = env.fs.Entry("test.xml")
doc = PGBuild.Node.XML.Document(testFile)

p.task("Looking up the second duck using DOM")
tag = doc.childNodes[0].getElementsByTagName("ducks")[0].getElementsByTagName("duck")[1]
print tag
print tag.toxml()

p.task("Testing relative addressing")
tag = doc.xpath('/test-fu')[0]
tag = tag.xpath('ducks')
print tag

p.task("Looking up the second duck using XPath")
tags = doc.xpath('/test-fu/ducks/duck[2]')
print tags
for tag in tags:
    print tag.toxml()

p.task("Looking up all the ducks in /test-fu/ducks using XPath")
tags = doc.xpath('/test-fu/ducks/duck')
print tags
for tag in tags:
    print tag.toxml()

p.task("Looking up all quotations using XPath")
tags = doc.xpath('//quotation')
print tags
for tag in tags:
    print tag.toxml()

p.task("Looking up Murray the Duck using XPath")
tags = doc.xpath('//duck[@name = "murray"]')
print tags
for tag in tags:
    print tag.toxml()




# Build a 'hello world'
prog = env.Program('hello', 'hello.c')
Default(prog)

# Add a dependency, so the hello world should be rebuilt
# when we change the <important/> part of the XML document,
# but not when we change other parts.
env.Depends(prog, tag)

