/*
 * "Fluidity" theme for PicoGUI
 *
 * Code and artwork Copyright 2002 Micah Dowty 
 * <micahjd@users.sourceforge.net>
 *
 * This theme requires the JPEG and PNG image loaders,
 * and is optimized for 320x240 or 240x320 high-color LCDs
 *
 */ 

/* Bitmaps */
prop bBackground, bDarkInterlace;

/* Fillstyles */
prop fBitmap, fNop, fExpand;

/* X and Y of source bitmap */
prop srcx, srcy, srcw, srch;

/* Amount not to tile on each side */
prop left_sz, right_sz, top_sz, bottom_sz;

/********************************** Default definitions */

object default {
  name = "Fluidity";
  bgfill = Copy(default::fBitmap);
  bitmap1 = Copy(default::bDarkInterlace);
  font = Font("Helvetica",10,0);

  bBackground = LoadBitmap("data/background.jpeg");
  bDarkInterlace = LoadBitmap("data/dark_interlace.png");

  fNop = fillstyle {
    Nop();
  };

  fBitmap = fillstyle {
    Bitmap(x,y,w,h,bitmap1);
  };

  /* Tile a bitmap horizontally, keeping the end pieces static */
  /* Expand horizontally and vertically by tiling 
   */
  fExpand = fillstyle {
    var bit, sx, sy, sw, sh, l, r, t, b, bsy, by;

    /* Load theme properties now */
    bit = bitmap1;
    sx  = srcx;
    sy  = srcy;
    sw  = srcw;
    sh  = srch;
    l   = left_sz;
    r   = right_sz;
    t   = top_sz;
    b   = bottom_sz;
	
    /* Limit minimum size */
    w = w < (l+r) ? (l+r) : w;
    h = h < (t+b) ? (t+b) : h;

    /* Some common subexpressions */
    bsy = sy+sh-b;
    by  = y+h-b;

    /* Top-left */
    SetSrc(sx,sy,l,t);
    Bitmap(x,y,l,t,bit);

    /* Top edge */
    SetSrc(sx+l,sy,sw-l-r,t);
    Tilebitmap(x+l,y,w-l-r,t,bit);

    /* Top-right */
    SetSrc(sx+sw-r,sy,r,t);
    Bitmap(x+w-r,y,r,t,bit);

    /* Left edge */
    SetSrc(sx,sy+t,l,sh-t-b);
    Tilebitmap(x,y+t,l,h-t-b,bit);

    /* Middle */
    SetSrc(sx+l,sy+t,sw-l-r,sh-t-b);
    Tilebitmap(x+l,y+t,w-l-r,h-t-b,bit);

    /* Right edge */
    SetSrc(sx+sw-r,sy+t,r,sh-t-b);
    Tilebitmap(x+w-r,y+t,r,h-t-b,bit);

    /* Bottom-left */
    SetSrc(sx,bsy,l,t);
    Bitmap(x,by,l,t,bit);

    /* Bottom edge */
    SetSrc(sx+l,bsy,sw-l-r,t);
    Tilebitmap(x+l,by,w-l-r,t,bit);

    /* Bottom-right */
    SetSrc(sx+sw-r,bsy,r,t);
    Bitmap(x+w-r,by,r,t,bit);

    /* Reset params to not mess up the widget.. */
    SetSrc(0,0,0,0);

    y = y + offset;
  };    

  srcx = 0;
  srcy = 0;
  srcw = 0;
  srch = 0;
  left_sz = 0;
  right_sz = 0;
  top_sz = 0;
  bottom_sz = 0;
  margin = 0;
  spacing = 0;
}
  
/********************************** Background */

object background {
  bgfill = Copy(default::fBitmap);
  bitmap1 = Copy(default::bBackground);
}

/********************************** Panels */

object panel {
  margin = 0;
}

object panelbar {
  width = 16;
  bgfill = Copy(default::fExpand);
  fgcolor = 0x57596F;
  margin = 2;
  font = Font("Gelly",10,0);
  
  /* This will make it left-justified when horizontal,
   * and centered when vertical. PG_A_NW will make it at the
   * top when vertical, but that doesn't look as good.
   */
  align = PG_A_LEFT;
}

object panelbar.h {
  bitmap1 = LoadBitmap("data/bright_hbar.png");
  srcw = 17;
  srch = 16;
  left_sz = 8;
  right_sz = 6;
  top_sz = 8;
  bottom_sz = 7;
}

object panelbar.v {
  bitmap1 = LoadBitmap("data/bright_vbar.png");
  srcw = 16;
  srch = 17;
  left_sz = 8;
  right_sz = 7;
  top_sz = 8;
  bottom_sz = 6;
}

object base.panelbtn {
  bgfill = Copy(default::fNop);
  side = PG_S_RIGHT;
  width = 13;
  height = 13;
  margin = 0;
}
  
object rotatebtn widgetbitmap = LoadBitmap("data/panel_swirl.png");
object closebtn widgetbitmap = LoadBitmap("data/panel_x.png");
object zoombtn widgetbitmap = LoadBitmap("data/panel_square.png");

/********************************** Popups */

object popup {
  margin = 2;

  bitmap1 = LoadBitmap("data/gold_hbar.png");

  backdrop = fillstyle {
    var title_x,title_y,title_w;

    /* Put the previous layer "out of focus" */
    Blur(0,0,0x7FFF,0x7FFF,2);
    SetLgop(PG_LGOP_ALPHA);
    SetColor(PGCF_ALPHA | PGC_WHITE | (30<<24));
    Rect(0,0,0x7FFF,0x7FFF);
    SetLgop(PG_LGOP_NONE);

    /* Place the titlebar */
    title_x = x - 8;
    title_y = y;
    title_w = w + 16;

    /* Draw a thin grey border containing our background pattern */
    SetColor(0x606060);
    Frame(x,y+4,w,h-4);
    Bitmap(x+1,y+5,w-2,h-6,bDarkInterlace);

    /* Draw the titlebar, with alpha */
    SetLgop(PG_LGOP_ALPHA);
    SetSrc(0,0,8,19);
    Bitmap(title_x,title_y,8,19,bitmap1);
    SetSrc(8,0,5,19);
    Tilebitmap(title_x+8,title_y,title_w-14,19,bitmap1);
    SetSrc(13,0,6,19);
    Bitmap(title_x+title_w-7,title_y,6,19,bitmap1);
    SetSrc(0,0,0,0);
    SetLgop(PG_LGOP_NONE);
  };

  bgfill = Copy(default::fNop);
}

object label.dlgtitle {
  bgfill = Copy(default::fNop);
  align = PG_A_LEFT;
  fgcolor = 0x706C5A;
  font = Font("Gelly",10,0);
}


/********************************** Buttons */

object button {
  bgfill = Copy(default::fExpand);
  bitmap1 = LoadBitmap("data/button_white_small.png");
  width = 18;
  height = 18;
  srcw = 18;
  srch = 18;
  left_sz = 8;
  right_sz = 9;
  top_sz = 8;
  bottom_sz = 9;
  margin = 4;
  spacing = 1;
  offset = -2;
}  

object button.on bitmap1 = LoadBitmap("data/button_bright_small.png");

/********************************** Scroll */

object scroll width = 14;

object scroll.v {
  bitmap1 = LoadBitmap("data/scrollbar_v.png");
  bitmap2 = LoadBitmap("data/scrollthumb_v.png");

  bgfill = fillstyle {
    /* Limit the minimum size */
    h = h<22 ? 22 : h;

    /* Standard background */
    Bitmap(x,y,w,h,bDarkInterlace);
    
    /* Alpha blended bar the scroll thumb slides on */
    SetLgop(PG_LGOP_ALPHA);
    SetSrc(0,0,8,10);
    Bitmap(x+4,y+4,8,10,bitmap1);
    SetSrc(0,10,8,1);
    Tilebitmap(x+4,y+14,8,h-29,bitmap1);
    SetSrc(0,11,8,11);
    Bitmap(x+4,y+h-15,8,11,bitmap1);
    SetLgop(PG_LGOP_NONE);
    SetSrc(0,0,0,0);
  };

  overlay = fillstyle {
    /* Limit the minimum size */
    h = h<15 ? 15 : h;

    /* Scrollbar thumb, stretched vertically */
    SetLgop(PG_LGOP_ALPHA);
    SetSrc(0,0,14,6);
    Bitmap(x+1,y,14,6,bitmap2);
    SetSrc(0,6,14,1);
    Tilebitmap(x+1,y+6,14,h-13,bitmap2);
    SetSrc(0,7,14,7);
    Bitmap(x+1,y+h-8,14,7,bitmap2);
    SetLgop(PG_LGOP_NONE);
    SetSrc(0,0,0,0);
  };
}

object scroll.h {
  bitmap1 = LoadBitmap("data/scrollbar_h.png");
  bitmap2 = LoadBitmap("data/scrollthumb_h.png");

  bgfill = fillstyle {
    /* Limit the minimum size */
    w = w<22 ? 22 : w;

    /* Standard background */
    Bitmap(x,y,w,h,bDarkInterlace);
    
    /* Alpha blended bar the scroll thumb slides on */
    SetLgop(PG_LGOP_ALPHA);
    SetSrc(0,0,10,8);
    Bitmap(x+4,y+4,10,8,bitmap1);
    SetSrc(10,0,1,8);
    Tilebitmap(x+14,y+4,w-29,8,bitmap1);
    SetSrc(11,0,11,8);
    Bitmap(x+w-15,y+4,11,8,bitmap1);
    SetLgop(PG_LGOP_NONE);
    SetSrc(0,0,0,0);
  };

  overlay = fillstyle {
    /* Limit the minimum size */
    w = w<15 ? 15 : w;

    /* Scrollbar thumb, stretched horizontally */
    SetLgop(PG_LGOP_ALPHA);
    SetSrc(0,0,6,14);
    Bitmap(x,y+1,6,14,bitmap2);
    SetSrc(6,0,1,14);
    Tilebitmap(x+6,y+1,w-13,14,bitmap2);
    SetSrc(7,0,7,14);
    Bitmap(x+w-8,y+1,7,14,bitmap2);
    SetLgop(PG_LGOP_NONE);
    SetSrc(0,0,0,0);
  };
}

object scroll.v.on bitmap2 = LoadBitmap("data/scrollthumb_v_bright.png");
object scroll.h.on bitmap2 = LoadBitmap("data/scrollthumb_h_bright.png");

/********************************** Scroll */

object menuitem {
  align = PG_A_LEFT;
}

/* The End */
