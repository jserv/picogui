# -*- python -*-

from beeconfig import compile, install, distrib, clean

multicompile     = 1

help = """
Provides the PicoGUI demonstration applications
"""

prefix = '/usr'

depends = [ 'picoguiclient' ]

runtime = [
    Runtime ( 'pterm', 'Terminal',
              content = [ 'bin/pterm' ],
              help = "PicoGUI terminal" ),
    Runtime ( 'pgboard', 'Virtual Keyboard',
              content = [ 'bin/pgboard' ],
              help = "Virtual Keyboard for PicoGUI" ),
    Runtime ( 'fitaly', 'Fitaly Keymap',
              depends = [ 'picoguiapps/pgboard' ],
              content = [ 'share/pgboard/us_fitaly_160.kb' ],
              help = "Fitaly Keymap for the PicoGUI Virtual Keyboard" ),
    Runtime ( 'us_qwerty', 'US QWERTY Keymap',
              depends = [ 'picoguiapps/pgboard' ],
              content = [ 'share/pgboard/us_qwerty_scalable.kb' ],
              help = "US QWERTY keymap for the PicoGUI Virtual Keyboard" ),
    Runtime ( 'us_qwerty_bitmap', 'US QWERTY Keymap (Bitmap 240x80)',
              depends = [ 'picoguiapps/pgboard' ],
              content = [ 'share/pgboard/us_qwerty_240.kb' ],
              help = "US QWERTY keymap for the PicoGUI Virtual Keyboard (Bitmap 240x80)" ),
    Runtime ( 'ch_qwertz', 'CH QWERTZ Keymap',
              depends = [ 'picoguiapps/pgboard' ],
              content = [ 'share/pgboard/ch_qwertz_scalable.kb' ],
              help = "CH QWERTZ keymap for the PicoGUI Virtual Keyboard" ),
    Runtime ( 'pgboard_run_fitaly', 'Run PGBoard with Fitaly keymap',
              depends = [ 'picoguiserver/server',
                          'picoguiapps/fitaly',
                          'pocketguiapps/sd_finder_run' ],
              rcscript = "# start pgboard\nsleep 4\n%s/bin/pgboard %s/share/pgboard/us_fitaly_160.kb&\n\n" % \
                         ( prefix, prefix )),
    Runtime ( 'pgboard_run_us_qwerty', 'Run PGBoard with US QWERTY keymap',
              depends = [ 'picoguiserver/server',
                          'picoguiapps/us_qwerty',
                          'pocketguiapps/sd_finder_run' ],
               rcscript = "# start pgboard\nsleep 4\n%s/bin/pgboard %s/share/pgboard/us_qwerty_scalable.kb&\n\n" % \
                          ( prefix, prefix )),
    Runtime ( 'pgboard_run_us_qwerty_bitmap', 'Run PGBoard with US QWERTY keymap (Bitmap 240x80)',
              depends = [ 'picoguiserver/server',
                          'picoguiapps/us_qwerty_bitmap',
                          'pocketguiapps/sd_finder_run' ],
               rcscript = "# start pgboard\nsleep 4\n%s/bin/pgboard %s/share/pgboard/us_qwerty_240.kb&\n\n" % \
                          ( prefix, prefix )),
    Runtime ( 'pgboard_run_ch_qwertz', 'Run PGBoard with CH QWERTZ keymap',
              depends = [ 'picoguiserver/server',
                          'picoguiapps/ch_qwertz',
                          'pocketguiapps/sd_finder_run' ],
               rcscript = "# start pgboard\nsleep 4\n%s/bin/pgboard %s/share/pgboard/ch_qwertz_scalable.kb&\n\n" % \
                          ( prefix, prefix )),
    Runtime ( 'pgboard_cmds', 'Virtual Keyboard Tester',
              content = [ 'bin/pgboard_cmds' ],
              help = "Test application to send commands to the Virtual Keyboard" ),
    Runtime ( 'fieldtest', 'Field test',
              content = [ 'bin/fieldtest' ],
              help = "Text input widget" ),
    Runtime ( 'omnibar', 'omnibar',
              content = [ 'bin/omnibar' ],
              help = "Basic launcher" ),
    Runtime ( 'pgtuxphone', 'pgtuxphone',
              content = [ 'bin/pgtuxphone' ],
              help = "PicoGUI tuxphone client" ),
    Runtime ( 'battleship', 'battleship',
              content = [ 'bin/battleship' ],
              help = "Battleship!" ),
    Runtime ( 'canvastst', 'canvastst',
              content = [ 'bin/canvastst' ],
              help = "Canvas Test" ),
    Runtime ( 'galaxy', 'galaxy',
              content = [ 'bin/galaxy' ],
              help = "Galaxy graphics stress test" ),
    Runtime ( 'dialogdemo', 'dialogdemo',
              content = [ 'bin/dialogdemo' ],
              help = "Dialog Demo" ),
    Runtime ( 'imgview', 'imgview',
              content = [ 'bin/imgview' ],
              help = "Image viewer" ),
    Runtime ( 'scribble', 'scribble',
              content = [ 'bin/scribble' ],
              help = "Scribble Pad" )
    ]

def prepare (module, platform, project):

    command = "../configure"

    command = command + " --with-rpm-root=%s --with-rpm-platform=%s --enable-bee" % \
              ( module.install_root (platform, project, standard = 1),
                platform.feature ['platform'] )

    command = command + " --prefix=%s --with-prefix --host=%s" % \
              ( module.feature ['prefix'],
                platform.feature ['platform'] )

    command = command + " --enable-optimisation"

    command = command + " --enable-pocketbee"

    command = command + " --with-picogui=%s" % \
              project.modules ['picoguiclient'].install_path (platform, project)

    message ("running: %s" % command)

    sequence ("rm -f config.status",
              "test ! -f ../autogen.sh || (cd .. ; ./autogen.sh || true)",
              command)
 
    return
